/**
 * StepManager - –ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–≥–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */

import { AppState } from '../../core/AppState.js?v=1.0.4';
import { NavigationManager } from '../../managers/NavigationManager.js?v=1.0.4';

class StepManager {
    constructor() {
        this.appState = AppState.getInstance();
        this.navigationManager = NavigationManager.getInstance();
        this.currentStep = 1;
        this.totalSteps = 6;
        this.stepComponents = new Map();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–≥–æ–≤
     */
    async initialize() {
        try {
            console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StepManager...');
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —à–∞–≥–æ–≤
            this.setupStepComponents();
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.subscribeToStateChanges();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
            this.showStep(1);
            
            console.log('‚úÖ StepManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ StepManager:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —à–∞–≥–æ–≤
     */
    setupStepComponents() {
        this.stepComponents.set(1, 'industrySelector');
        this.stepComponents.set(2, 'businessSizeStep');
        this.stepComponents.set(3, 'marketingBudgetStep');
        this.stepComponents.set(4, 'marketingTeamStep');
        this.stepComponents.set(5, 'marketingToolsStep');
        this.stepComponents.set(6, 'contactFormStep');
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    subscribeToStateChanges() {
        this.appState.subscribe((event) => {
            if (event.detail.type === 'currentStep') {
                let step = event.detail.data;
                if (typeof step === 'object' && step !== null && 'step' in step) {
                    step = step.step;
                }
                this.updateStepDisplay(Number(step));
            }
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–≥–∞
     */
    updateStepDisplay(step) {
        if (typeof step === 'object' && step !== null && 'step' in step) {
            step = step.step;
        }
        step = Number(step);
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            this.updateProgressBar(step);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.updatePageTitle(step);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            this.showStepComponent(step);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–≥–∞:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
     */
    updateProgressBar(step) {
        const progressBar = window.app?.componentManager?.getComponent('progressBar');
        if (progressBar) {
            progressBar.update(step);
            progressBar.setStep(step);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updatePageTitle(step) {
        const titles = {
            1: '–í—ã–±–æ—Ä –æ—Ç—Ä–∞—Å–ª–∏',
            2: '–†–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞',
            3: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç',
            4: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞',
            5: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
            6: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        };
        
        const title = titles[step] || '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∏';
        document.title = `${title} - Steamphony`;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —à–∞–≥–∞
     */
    showStepComponent(step) {
        try {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏
            this.hideAllSteps();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —à–∞–≥
            const componentName = this.stepComponents.get(step);
            if (componentName) {
                const componentManager = window.app?.componentManager;
                console.log('üîç StepManager: window.app.componentManager =', componentManager);
                console.log('üîç StepManager: window.app =', window.app);
                
                if (componentManager && typeof componentManager.showComponent === 'function') {
                    componentManager.showComponent(componentName);
                    console.log(`‚úÖ –ü–æ–∫–∞–∑–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentName} –¥–ª—è —à–∞–≥–∞ ${step}`);
                } else {
                    console.warn('‚ùå ComponentManager –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ showComponent –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
                    // Fallback: –ø—Ä—è–º–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                    this.initializeComponentFallback(componentName, step);
                }
            } else {
                console.warn(`‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —à–∞–≥–∞ ${step} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            this.currentStep = step;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —à–∞–≥–∞:', error);
        }
    }

    /**
     * Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    initializeComponentFallback(componentName, step) {
        try {
            console.log(`üîÑ Fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${componentName}`);
            const formContent = document.getElementById('form-content');
            if (!formContent) {
                console.error('‚ùå #form-content –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è fallback');
                return;
            }
            
            // –ü—Ä–æ—Å—Ç–∞—è fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            switch (componentName) {
                case 'industrySelector':
                    this.renderIndustrySelectorFallback(formContent);
                    break;
                case 'businessSizeStep':
                    this.renderBusinessSizeFallback(formContent);
                    break;
                case 'marketingBudgetStep':
                    this.renderBudgetFallback(formContent);
                    break;
                case 'marketingTeamStep':
                    this.renderTeamFallback(formContent);
                    break;
                case 'marketingToolsStep':
                    this.renderToolsFallback(formContent);
                    break;
                case 'contactFormStep':
                    this.renderContactFallback(formContent);
                    break;
                default:
                    console.warn(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è fallback: ${componentName}`);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ fallback –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * Fallback —Ä–µ–Ω–¥–µ—Ä IndustrySelector
     */
    renderIndustrySelectorFallback(formContent) {
        formContent.innerHTML = `
            <div class="calculator-step active">
                <h3 class="step-title">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ç—Ä–∞—Å–ª—å</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <button class="industry-card p-4 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-industry="restaurant">
                        <div class="text-center">
                            <h4 class="font-medium text-gray-900">–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ</h4>
                            <p class="text-sm text-gray-600 mt-1">–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ</p>
                        </div>
                    </button>
                    <button class="industry-card p-4 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-industry="retail">
                        <div class="text-center">
                            <h4 class="font-medium text-gray-900">–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</h4>
                            <p class="text-sm text-gray-600 mt-1">–ú–∞–≥–∞–∑–∏–Ω—ã –∏ —Ç–æ—Ä–≥–æ–≤–ª—è</p>
                        </div>
                    </button>
                    <button class="industry-card p-4 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-industry="services">
                        <div class="text-center">
                            <h4 class="font-medium text-gray-900">–£—Å–ª—É–≥–∏</h4>
                            <p class="text-sm text-gray-600 mt-1">–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥</p>
                        </div>
                    </button>
                </div>
                <div class="mt-8 text-center">
                    <button class="nav-button primary" onclick="window.app.stepManager.nextStep()">–î–∞–ª–µ–µ</button>
                </div>
            </div>
        `;
        
        // –ü—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        const industryCards = formContent.querySelectorAll('.industry-card');
        industryCards.forEach(card => {
            card.addEventListener('click', () => {
                industryCards.forEach(c => c.classList.remove('border-steamphony-blue', 'bg-blue-50'));
                card.classList.add('border-steamphony-blue', 'bg-blue-50');
                setTimeout(() => {
                    if (window.app?.stepManager) {
                        window.app.stepManager.nextStep();
                    }
                }, 300);
            });
        });
    }

    /**
     * Fallback —Ä–µ–Ω–¥–µ—Ä BusinessSize
     */
    renderBusinessSizeFallback(formContent) {
        formContent.innerHTML = `
            <div class="calculator-step active">
                <h3 class="step-title">–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞</h3>
                <p class="step-description">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <button class="size-card p-6 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-size="small">
                        <h4 class="font-medium text-gray-900">1-10 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</h4>
                        <p class="text-sm text-gray-600">–ú–∞–ª—ã–π –±–∏–∑–Ω–µ—Å</p>
                    </button>
                    <button class="size-card p-6 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-size="medium">
                        <h4 class="font-medium text-gray-900">11-50 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</h4>
                        <p class="text-sm text-gray-600">–°—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å</p>
                    </button>
                    <button class="size-card p-6 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-size="large">
                        <h4 class="font-medium text-gray-900">50+ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</h4>
                        <p class="text-sm text-gray-600">–ö—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å</p>
                    </button>
                </div>
                <div class="mt-8 flex justify-between">
                    <button class="nav-button secondary" onclick="window.app.stepManager.previousStep()">–ù–∞–∑–∞–¥</button>
                    <button class="nav-button primary" onclick="window.app.stepManager.nextStep()">–î–∞–ª–µ–µ</button>
                </div>
            </div>
        `;
        
        const sizeCards = formContent.querySelectorAll('.size-card');
        sizeCards.forEach(card => {
            card.addEventListener('click', () => {
                sizeCards.forEach(c => c.classList.remove('border-steamphony-blue', 'bg-blue-50'));
                card.classList.add('border-steamphony-blue', 'bg-blue-50');
            });
        });
    }

    /**
     * Fallback —Ä–µ–Ω–¥–µ—Ä Budget
     */
    renderBudgetFallback(formContent) {
        formContent.innerHTML = `
            <div class="calculator-step active">
                <h3 class="step-title">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç</h3>
                <p class="step-description">–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥</p>
                <div class="space-y-4">
                    <input type="range" min="50000" max="1000000" step="50000" value="200000" class="w-full" id="budget-slider">
                    <div class="text-center">
                        <span class="text-2xl font-bold text-steamphony-blue" id="budget-display">200 000 ‚ÇΩ</span>
                        <p class="text-sm text-gray-600">–≤ –º–µ—Å—è—Ü</p>
                    </div>
                </div>
                <div class="mt-8 flex justify-between">
                    <button class="nav-button secondary" onclick="window.app.stepManager.previousStep()">–ù–∞–∑–∞–¥</button>
                    <button class="nav-button primary" onclick="window.app.stepManager.nextStep()">–î–∞–ª–µ–µ</button>
                </div>
            </div>
        `;
        
        const slider = formContent.querySelector('#budget-slider');
        const display = formContent.querySelector('#budget-display');
        if (slider && display) {
            slider.addEventListener('input', (e) => {
                const value = parseInt(e.target.value);
                display.textContent = new Intl.NumberFormat('ru-RU', {
                    style: 'currency',
                    currency: 'RUB',
                    minimumFractionDigits: 0
                }).format(value);
            });
        }
    }

    /**
     * Fallback —Ä–µ–Ω–¥–µ—Ä Team
     */
    renderTeamFallback(formContent) {
        formContent.innerHTML = `
            <div class="calculator-step active">
                <h3 class="step-title">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞</h3>
                <p class="step-description">–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ –≤ —à—Ç–∞—Ç–µ?</p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <button class="team-card p-6 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-team="yes">
                        <h4 class="font-medium text-gray-900">–î–∞, –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥</h4>
                        <p class="text-sm text-gray-600">–í —à—Ç–∞—Ç–µ –∏–ª–∏ –Ω–∞ –∞—É—Ç—Å–æ—Ä—Å–µ</p>
                    </button>
                    <button class="team-card p-6 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-team="no">
                        <h4 class="font-medium text-gray-900">–ù–µ—Ç, –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞ –Ω–µ—Ç</h4>
                        <p class="text-sm text-gray-600">–î–µ–ª–∞–µ–º –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Å–∞–º–∏</p>
                    </button>
                </div>
                <div class="mt-8 flex justify-between">
                    <button class="nav-button secondary" onclick="window.app.stepManager.previousStep()">–ù–∞–∑–∞–¥</button>
                    <button class="nav-button primary" onclick="window.app.stepManager.nextStep()">–î–∞–ª–µ–µ</button>
                </div>
            </div>
        `;
        
        const teamCards = formContent.querySelectorAll('.team-card');
        teamCards.forEach(card => {
            card.addEventListener('click', () => {
                teamCards.forEach(c => c.classList.remove('border-steamphony-blue', 'bg-blue-50'));
                card.classList.add('border-steamphony-blue', 'bg-blue-50');
            });
        });
    }

    /**
     * Fallback —Ä–µ–Ω–¥–µ—Ä Tools
     */
    renderToolsFallback(formContent) {
        formContent.innerHTML = `
            <div class="calculator-step active">
                <h3 class="step-title">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h3>
                <p class="step-description">–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?</p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="tool-card p-4 border border-gray-200 rounded-lg">
                        <input type="checkbox" id="social" value="social">
                        <label for="social">
                            <h4>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏</h4>
                            <p>Instagram, VK, Telegram</p>
                        </label>
                    </div>
                    <div class="tool-card p-4 border border-gray-200 rounded-lg">
                        <input type="checkbox" id="ads" value="ads">
                        <label for="ads">
                            <h4>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞</h4>
                            <p>–Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç, Google Ads</p>
                        </label>
                    </div>
                    <div class="tool-card p-4 border border-gray-200 rounded-lg">
                        <input type="checkbox" id="seo" value="seo">
                        <label for="seo">
                            <h4>SEO</h4>
                            <p>–ü–æ–∏—Å–∫–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è</p>
                        </label>
                    </div>
                    <div class="tool-card p-4 border border-gray-200 rounded-lg">
                        <input type="checkbox" id="email" value="email">
                        <label for="email">
                            <h4>Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥</h4>
                            <p>–†–∞—Å—Å—ã–ª–∫–∏ –ø–æ email</p>
                        </label>
                    </div>
                </div>
                <div class="mt-8 flex justify-between">
                    <button class="nav-button secondary" onclick="window.app.stepManager.previousStep()">–ù–∞–∑–∞–¥</button>
                    <button class="nav-button primary" onclick="window.app.stepManager.nextStep()">–î–∞–ª–µ–µ</button>
                </div>
            </div>
        `;
        
        const toolCards = formContent.querySelectorAll('.tool-card');
        toolCards.forEach(card => {
            card.addEventListener('click', (e) => {
                if (e.target.type === 'checkbox') return;
                const checkbox = card.querySelector('input[type="checkbox"]');
                checkbox.checked = !checkbox.checked;
                if (checkbox.checked) {
                    card.style.borderColor = '#8B4513';
                    card.style.background = '#f0f0f0';
                } else {
                    card.style.borderColor = '#ddd';
                    card.style.background = 'white';
                }
            });
        });
    }

    /**
     * Fallback —Ä–µ–Ω–¥–µ—Ä Contact
     */
    renderContactFallback(formContent) {
        formContent.innerHTML = `
            <div class="calculator-step active">
                <h3 class="step-title">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <p class="step-description">–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
                <div class="space-y-4">
                    <input type="text" placeholder="–í–∞—à–µ –∏–º—è" class="w-full p-3 border border-gray-300 rounded-lg">
                    <input type="email" placeholder="Email" class="w-full p-3 border border-gray-300 rounded-lg">
                    <input type="tel" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" class="w-full p-3 border border-gray-300 rounded-lg">
                </div>
                <div class="mt-8 flex justify-between">
                    <button class="nav-button secondary" onclick="window.app.stepManager.previousStep()">–ù–∞–∑–∞–¥</button>
                    <button class="nav-button primary" onclick="window.app.stepManager.onCalculatorComplete()">–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</button>
                </div>
            </div>
        `;
    }

    /**
     * –°–∫—Ä—ã—Ç—å –≤—Å–µ —à–∞–≥–∏
     */
    hideAllSteps() {
        const formContent = document.getElementById('form-content');
        if (formContent) {
            const steps = formContent.querySelectorAll('.calculator-step');
            steps.forEach(step => {
                step.classList.remove('active');
            });
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥
     */
    showStep(step) {
        if (step >= 1 && step <= this.totalSteps) {
            this.appState.setCurrentStep(step);
        }
    }

    /**
     * –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
     */
    nextStep() {
        const nextStep = Math.min(this.currentStep + 1, this.totalSteps);
        this.showStep(nextStep);
    }

    /**
     * –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
     */
    previousStep() {
        const prevStep = Math.max(this.currentStep - 1, 1);
        this.showStep(prevStep);
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É
     */
    goToStep(step) {
        this.showStep(step);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
     */
    getCurrentStep() {
        return this.currentStep;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤
     */
    getTotalSteps() {
        return this.totalSteps;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–≥ –ø–æ—Å–ª–µ–¥–Ω–∏–º
     */
    isLastStep() {
        return this.currentStep === this.totalSteps;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–≥ –ø–µ—Ä–≤—ã–º
     */
    isFirstStep() {
        return this.currentStep === 1;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    onCalculatorComplete() {
        try {
            console.log('üéâ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.showResults();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.appState.setCalculatorCompleted(true);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    showResults() {
        console.log('[StepManager] showResults –≤—ã–∑–≤–∞–Ω');
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä ContactFormStep
        const formContent = document.getElementById('form-content');
        if (!formContent) return;

        // –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä ContactFormStep
        let contactFormStep = window.app?.componentManager?.getComponent('contactFormStep');
        console.log('[StepManager] contactFormStep –∏–∑ componentManager:', contactFormStep);
        if (!contactFormStep) {
            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –≤—Ä—É—á–Ω—É—é (fallback)
            const ContactFormStep = window.ContactFormStep || (window.app?.componentManager?.ContactFormStep);
            console.log('[StepManager] ContactFormStep –∫–ª–∞—Å—Å:', ContactFormStep);
            if (ContactFormStep) {
                contactFormStep = new ContactFormStep(formContent);
                window.app.componentManager.setComponent('contactFormStep', contactFormStep);
                console.log('[StepManager] ContactFormStep —Å–æ–∑–¥–∞–Ω –≤—Ä—É—á–Ω—É—é:', contactFormStep);
            } else {
                // Fallback: –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                console.log('[StepManager] Fallback: ContactFormStep –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É');
                formContent.innerHTML = '<div class="calculator-step active"><h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å</h3></div>';
                return;
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const formData = this.appState.getFormData();
        console.log('[StepManager] formData –∏–∑ AppState:', formData);
        
        // –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º updateWithFormData –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞—Å—á–µ—Ç–∞
        if (typeof contactFormStep.updateWithFormData === 'function') {
            console.log('[StepManager] –í—ã–∑—ã–≤–∞—é updateWithFormData —Å –¥–∞–Ω–Ω—ã–º–∏:', formData);
            contactFormStep.updateWithFormData(formData);
        } else {
            console.log('[StepManager] updateWithFormData –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é:', formData);
            contactFormStep.formData = formData;
            contactFormStep.calculationResults = contactFormStep.calculateResults();
            if (typeof contactFormStep.updateResultsUI === 'function') {
                contactFormStep.updateResultsUI();
            }
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    calculateResults(formData) {
        const budget = formData.budget || 200000;
        const teamSize = formData.team || '1';
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏
        const toolsSavings = budget * 0.15; // 15% —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        const timeSavings = budget * 0.25; // 25% —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        const errorSavings = budget * 0.10; // 10% —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –æ—à–∏–±–∫–∞—Ö
        
        const totalSavings = toolsSavings + timeSavings + errorSavings;
        
        return {
            toolsSavings: Math.round(toolsSavings),
            timeSavings: Math.round(timeSavings),
            errorSavings: Math.round(errorSavings),
            totalSavings: Math.round(totalSavings)
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     */
    formatCurrency(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    }

    /**
     * –°–±—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–≥–æ–≤
     */
    reset() {
        this.currentStep = 1;
        this.stepComponents.clear();
        this.setupStepComponents();
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        this.reset();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const stepManager = new StepManager();