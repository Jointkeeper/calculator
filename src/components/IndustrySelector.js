/**
 * IndustrySelector Component –¥–ª—è Universal Calculator
 * –ü–µ—Ä–≤—ã–π —à–∞–≥ —Ñ–æ—Ä–º—ã - –≤—ã–±–æ—Ä –æ—Ç—Ä–∞—Å–ª–∏ –±–∏–∑–Ω–µ—Å–∞
 * 
 * @class IndustrySelector
 * @author Steamphony Digital Agency
 */
class IndustrySelector {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä IndustrySelector
   * 
   * @param {HTMLElement} container - DOM —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @param {Object} options - –û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  constructor(container, options = {}) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!container || !(container instanceof HTMLElement)) {
      throw new Error('IndustrySelector: container –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç–æ–º');
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    this.container = container;
    this.selectedIndustry = null;
    this.filteredIndustries = [];
    this.searchTerm = '';
    this.isRendered = false;

    // –ö–æ–ª–±—ç–∫–∏
    this.onSelect = options.onSelect || (() => {});
    this.onNext = options.onNext || (() => {});
    this.onSearch = options.onSearch || (() => {});

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    this.options = {
      showPopularSection: true,
      enableSearch: true,
      enableCustomInput: true,
      popularLimit: 4,
      minSearchLength: 2,
      ...options
    };

    // Hardcoded –¥–∞–Ω–Ω—ã–µ 8 –æ—Ç—Ä–∞—Å–ª–µ–π
    this.industries = {
      restaurant: {
        key: 'restaurant',
        icon: 'üçΩÔ∏è',
        title: '–†–µ—Å—Ç–æ—Ä–∞–Ω–Ω—ã–π –±–∏–∑–Ω–µ—Å',
        description: '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã, –∫–∞—Ñ–µ, –±–∞—Ä—ã, –¥–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã',
        examples: '–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Å—Ç–µ–π, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤, –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑—ã',
        popular: true,
        searchTerms: ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–∫–∞—Ñ–µ', '–±–∞—Ä', '–µ–¥–∞', '–¥–æ—Å—Ç–∞–≤–∫–∞', '–æ–±—â–µ–ø–∏—Ç', '–ø–∏—Ç–∞–Ω–∏–µ'],
        metrics: {
          avgBudget: 150000,
          avgSavings: 30,
          roiMultiplier: 1.2
        }
      },
      beauty: {
        key: 'beauty',
        icon: 'üíÖ',
        title: '–ö—Ä–∞—Å–æ—Ç–∞ –∏ wellness',
        description: '–°–∞–ª–æ–Ω—ã –∫—Ä–∞—Å–æ—Ç—ã, –°–ü–ê, —Ñ–∏—Ç–Ω–µ—Å, –º–∞—Å—Å–∞–∂',
        examples: '–ó–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —É—Å–ª—É–≥, –ª–æ—è–ª—å–Ω–æ—Å—Ç—å',
        popular: true,
        searchTerms: ['—Å–∞–ª–æ–Ω', '–∫—Ä–∞—Å–æ—Ç–∞', '—Å–ø–∞', '—Ñ–∏—Ç–Ω–µ—Å', '–º–∞—Å—Å–∞–∂', '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥–∏—è', 'wellness'],
        metrics: {
          avgBudget: 120000,
          avgSavings: 35,
          roiMultiplier: 1.4
        }
      },
      retail: {
        key: 'retail',
        icon: 'üõçÔ∏è',
        title: '–†–∏—Ç–µ–π–ª –∏ —Ç–æ—Ä–≥–æ–≤–ª—è',
        description: '–ú–∞–≥–∞–∑–∏–Ω—ã, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω—ã, –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã',
        examples: '–ü—Ä–æ–¥–∞–∂–∏, –∫–æ–Ω–≤–µ—Ä—Å–∏—è, —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤',
        popular: true,
        searchTerms: ['–º–∞–≥–∞–∑–∏–Ω', '—Ç–æ—Ä–≥–æ–≤–ª—è', '—Ä–∏—Ç–µ–π–ª', 'ecommerce', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å'],
        metrics: {
          avgBudget: 200000,
          avgSavings: 25,
          roiMultiplier: 1.3
        }
      },
      services: {
        key: 'services',
        icon: 'üè•',
        title: '–£—Å–ª—É–≥–∏',
        description: '–ú–µ–¥–∏—Ü–∏–Ω–∞, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥, —Ä–µ–º–æ–Ω—Ç',
        examples: '–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤, –¥–æ–≤–µ—Ä–∏–µ, —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å',
        popular: true,
        searchTerms: ['–º–µ–¥–∏—Ü–∏–Ω–∞', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–∫–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥', '—É—Å–ª—É–≥–∏', '—Ä–µ–º–æ–Ω—Ç', '—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—è'],
        metrics: {
          avgBudget: 180000,
          avgSavings: 40,
          roiMultiplier: 1.6
        }
      },
      b2b: {
        key: 'b2b',
        icon: 'üèóÔ∏è',
        title: 'B2B —Å—Ñ–µ—Ä–∞',
        description: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –ª–æ–≥–∏—Å—Ç–∏–∫–∞, IT, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        examples: '–õ–∏–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –¥–ª–∏–Ω–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–¥–∞–∂, —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å',
        popular: false,
        searchTerms: ['–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', 'it', 'b2b', '–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å'],
        metrics: {
          avgBudget: 300000,
          avgSavings: 45,
          roiMultiplier: 1.8
        }
      },
      realestate: {
        key: 'realestate',
        icon: 'üè†',
        title: '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
        description: '–ê–≥–µ–Ω—Ç—Å—Ç–≤–∞, –¥–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç, –∞—Ä–µ–Ω–¥–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        examples: '–ü—Ä–æ–¥–∞–∂–∏ –æ–±—ä–µ–∫—Ç–æ–≤, –¥–æ–≤–µ—Ä–∏–µ, –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥',
        popular: false,
        searchTerms: ['–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ', '–¥–µ–≤–µ–ª–æ–ø–º–µ–Ω—Ç', '–∞—Ä–µ–Ω–¥–∞', '–∫–≤–∞—Ä—Ç–∏—Ä—ã', '–¥–æ–º–∞'],
        metrics: {
          avgBudget: 250000,
          avgSavings: 35,
          roiMultiplier: 1.5
        }
      },
      finance: {
        key: 'finance',
        icon: 'üíº',
        title: '–§–∏–Ω–∞–Ω—Å—ã',
        description: '–ë–∞–Ω–∫–∏, —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏, –∫—Ä–µ–¥–∏—Ç—ã',
        examples: '–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤, –¥–æ–≤–µ—Ä–∏–µ, —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å',
        popular: false,
        searchTerms: ['–±–∞–Ω–∫', '—Ñ–∏–Ω–∞–Ω—Å—ã', '—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ', '–∫—Ä–µ–¥–∏—Ç', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–∑–∞–π–º—ã'],
        metrics: {
          avgBudget: 400000,
          avgSavings: 30,
          roiMultiplier: 1.7
        }
      },
      other: {
        key: 'other',
        icon: 'üéØ',
        title: '–î—Ä—É–≥–æ–µ',
        description: '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –æ—Ç—Ä–∞—Å–ª—å',
        examples: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è',
        popular: false,
        searchTerms: ['–¥—Ä—É–≥–æ–µ', '–ø—Ä–æ—á–µ–µ', '–∏–Ω–æ–µ', '—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ'],
        metrics: {
          avgBudget: 150000,
          avgSavings: 30,
          roiMultiplier: 1.2
        },
        customInput: true
      }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.handleSearch = this.handleSearch.bind(this);
    this.handleCardClick = this.handleCardClick.bind(this);
    this.handleCardKeydown = this.handleCardKeydown.bind(this);
    this.handleNextClick = this.handleNextClick.bind(this);
    this.handleCustomInput = this.handleCustomInput.bind(this);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @private
   */
  init() {
    try {
      this.filteredIndustries = Object.values(this.industries);
      this.render();
      this.attachEventListeners();
      
      // Dispatch –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      this.dispatchEvent('industrySelectorReady', {
        totalIndustries: Object.keys(this.industries).length,
        popularIndustries: this.getPopularIndustries().length
      });
    } catch (error) {
      console.error('IndustrySelector: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.renderError(error.message);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   * @private
   */
  render() {
    const selectorHTML = `
      <div class="industry-selector" role="region" aria-label="–í—ã–±–æ—Ä –æ—Ç—Ä–∞—Å–ª–∏ –±–∏–∑–Ω–µ—Å–∞">
        <!-- Header -->
        <div class="selector-header">
          <h2 class="selector-title">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ç—Ä–∞—Å–ª—å</h2>
          <p class="selector-description">
            –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞
          </p>
        </div>

        <!-- Search -->
        ${this.options.enableSearch ? this.renderSearch() : ''}

        <!-- Popular Industries -->
        ${this.options.showPopularSection ? this.renderPopularSection() : ''}

        <!-- All Industries -->
        <div class="industries-section">
          <h3 class="section-title">–í—Å–µ –æ—Ç—Ä–∞—Å–ª–∏</h3>
          <div class="industries-grid" role="grid" aria-label="–°–ø–∏—Å–æ–∫ –æ—Ç—Ä–∞—Å–ª–µ–π">
            ${this.renderIndustryCards()}
          </div>
        </div>

        <!-- Custom Input (hidden by default) -->
        <div class="custom-input-section" id="custom-input-section" style="display: none;">
          <div class="custom-input-wrapper">
            <label for="custom-industry-input" class="form-label">
              –£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –æ—Ç—Ä–∞—Å–ª—å
            </label>
            <input 
              type="text" 
              id="custom-industry-input" 
              class="form-input custom-industry-input"
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å, –¢—É—Ä–∏–∑–º, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç..."
              maxlength="50"
              aria-describedby="custom-input-help"
            >
            <div id="custom-input-help" class="form-help">
              –û–ø–∏—à–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –≤ 2-3 —Å–ª–æ–≤–∞—Ö
            </div>
            <div class="custom-input-error" id="custom-input-error" role="alert" aria-live="polite"></div>
          </div>
        </div>

        <!-- Next Button -->
        <div class="selector-actions">
          <button 
            type="button" 
            class="btn btn-primary btn-lg selector-next-btn" 
            id="industry-next-btn"
            disabled
            aria-describedby="next-btn-help"
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            <svg class="btn-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M5 12h14M12 5l7 7-7 7"/>
            </svg>
          </button>
          <div id="next-btn-help" class="form-help">
            –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
          </div>
        </div>

        <!-- Trust Signals -->
        <div class="selector-trust">
          <div class="trust-item">
            <span class="trust-icon">üîí</span>
            <span class="trust-text">100% –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ</span>
          </div>
          <div class="trust-item">
            <span class="trust-icon">‚ö°</span>
            <span class="trust-text">–†–∞—Å—á–µ—Ç –∑–∞ 3 –º–∏–Ω—É—Ç—ã</span>
          </div>
          <div class="trust-item">
            <span class="trust-icon">üéØ</span>
            <span class="trust-text">–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</span>
          </div>
        </div>
      </div>
    `;

    this.container.innerHTML = selectorHTML;
    this.cacheElements();
    this.isRendered = true;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ search —Å–µ–∫—Ü–∏–∏
   * @private
   * @returns {string} HTML search —Å–µ–∫—Ü–∏–∏
   */
  renderSearch() {
    return `
      <div class="search-section">
        <div class="search-wrapper">
          <div class="search-input-wrapper">
            <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <circle cx="11" cy="11" r="8"/>
              <path d="m21 21-4.35-4.35"/>
            </svg>
            <input 
              type="text" 
              class="search-input" 
              id="industry-search"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –æ—Ç—Ä–∞—Å–ª–∏..."
              aria-label="–ü–æ–∏—Å–∫ –æ—Ç—Ä–∞—Å–ª–∏"
              autocomplete="off"
            >
            <button 
              type="button" 
              class="search-clear" 
              id="search-clear"
              aria-label="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫"
              style="display: none;"
            >
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="18" y1="6" x2="6" y2="18"/>
                <line x1="6" y1="6" x2="18" y2="18"/>
              </svg>
            </button>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–µ–∫—Ü–∏–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π
   * @private
   * @returns {string} HTML –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π
   */
  renderPopularSection() {
    const popularIndustries = this.getPopularIndustries();
    
    if (popularIndustries.length === 0) {
      return '';
    }

    return `
      <div class="popular-section">
        <h3 class="section-title">
          <span class="section-icon">üî•</span>
          –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏
        </h3>
        <div class="popular-grid" role="grid" aria-label="–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏">
          ${popularIndustries.map(industry => this.renderIndustryCard(industry, true)).join('')}
        </div>
      </div>
    `;
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –æ—Ç—Ä–∞—Å–ª–µ–π
   * @private
   * @returns {string} HTML –∫–∞—Ä—Ç–æ—á–µ–∫
   */
  renderIndustryCards() {
    return this.filteredIndustries
      .filter(industry => !industry.popular || !this.options.showPopularSection)
      .map(industry => this.renderIndustryCard(industry))
      .join('');
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç—Ä–∞—Å–ª–∏
   * @private
   * @param {Object} industry - –î–∞–Ω–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏
   * @param {boolean} isPopular - –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π
   * @returns {string} HTML –∫–∞—Ä—Ç–æ—á–∫–∏
   */
  renderIndustryCard(industry, isPopular = false) {
    const isSelected = this.selectedIndustry?.key === industry.key;
    const cardClasses = [
      'industry-card',
      isSelected ? 'selected' : '',
      isPopular ? 'popular' : '',
      industry.key === 'other' ? 'custom' : ''
    ].filter(Boolean).join(' ');

    return `
      <div 
        class="${cardClasses}"
        data-industry="${industry.key}"
        role="button"
        tabindex="0"
        aria-pressed="${isSelected}"
        aria-describedby="industry-${industry.key}-desc"
      >
        <div class="card-header">
          <div class="card-icon" role="img" aria-label="${industry.title}">${industry.icon}</div>
          ${isSelected ? '<div class="card-checkmark" aria-hidden="true">‚úì</div>' : ''}
          ${isPopular ? '<div class="card-badge">–ü–æ–ø—É–ª—è—Ä–Ω–æ</div>' : ''}
        </div>
        
        <div class="card-content">
          <h4 class="card-title">${industry.title}</h4>
          <p class="card-description" id="industry-${industry.key}-desc">
            ${industry.description}
          </p>
          <div class="card-examples">
            <span class="examples-label">–ó–∞–¥–∞—á–∏:</span>
            <span class="examples-text">${industry.examples}</span>
          </div>
        </div>

        <div class="card-footer">
          <div class="card-metrics">
            <div class="metric">
              <span class="metric-value">${industry.metrics.avgSavings}%</span>
              <span class="metric-label">—Å—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è</span>
            </div>
            <div class="metric">
              <span class="metric-value">${industry.metrics.roiMultiplier}x</span>
              <span class="metric-label">ROI</span>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * @private
   */
  cacheElements() {
    this.elements = {
      searchInput: this.container.querySelector('#industry-search'),
      searchClear: this.container.querySelector('#search-clear'),
      industryCards: this.container.querySelectorAll('.industry-card'),
      industriesGrid: this.container.querySelector('.industries-grid'),
      popularGrid: this.container.querySelector('.popular-grid'),
      nextBtn: this.container.querySelector('#industry-next-btn'),
      customInputSection: this.container.querySelector('#custom-input-section'),
      customInput: this.container.querySelector('#custom-industry-input'),
      customInputError: this.container.querySelector('#custom-input-error'),
      nextBtnHelp: this.container.querySelector('#next-btn-help')
    };
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   * @private
   */
  attachEventListeners() {
    // Search functionality
    if (this.elements.searchInput) {
      this.elements.searchInput.addEventListener('input', this.handleSearch);
      this.elements.searchClear.addEventListener('click', () => this.clearSearch());
    }

    // Industry cards
    this.elements.industryCards.forEach(card => {
      card.addEventListener('click', this.handleCardClick);
      card.addEventListener('keydown', this.handleCardKeydown);
    });

    // Next button
    if (this.elements.nextBtn) {
      this.elements.nextBtn.addEventListener('click', this.handleNextClick);
    }

    // Custom input
    if (this.elements.customInput) {
      this.elements.customInput.addEventListener('input', this.handleCustomInput);
      this.elements.customInput.addEventListener('blur', this.validateCustomInput.bind(this));
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
   * @private
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ input
   */
  handleSearch(event) {
    const query = event.target.value.trim().toLowerCase();
    this.searchTerm = query;

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏
    if (this.elements.searchClear) {
      this.elements.searchClear.style.display = query ? 'flex' : 'none';
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç—Ä–∞—Å–ª–µ–π
    this.filterIndustries(query);
    
    // Dispatch —Å–æ–±—ã—Ç–∏—è –ø–æ–∏—Å–∫–∞
    this.dispatchEvent('searchPerformed', {
      query,
      resultsCount: this.filteredIndustries.length
    });
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç—Ä–∞—Å–ª–µ–π –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
   * @private
   * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   */
  filterIndustries(query) {
    if (!query || query.length < this.options.minSearchLength) {
      this.filteredIndustries = Object.values(this.industries);
    } else {
      this.filteredIndustries = Object.values(this.industries).filter(industry => {
        const searchableText = [
          industry.title,
          industry.description,
          industry.examples,
          ...industry.searchTerms
        ].join(' ').toLowerCase();
        
        return searchableText.includes(query);
      });
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    this.updateIndustriesDisplay();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Ä–∞—Å–ª–µ–π
   * @private
   */
  updateIndustriesDisplay() {
    if (!this.elements.industriesGrid) return;

    const filteredNonPopular = this.filteredIndustries.filter(
      industry => !industry.popular || !this.options.showPopularSection
    );

    this.elements.industriesGrid.innerHTML = 
      filteredNonPopular.map(industry => this.renderIndustryCard(industry)).join('');

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    this.reattachCardListeners();

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    if (this.filteredIndustries.length === 0) {
      this.showNoResults();
    }
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
   * @private
   */
  reattachCardListeners() {
    this.elements.industryCards = this.container.querySelectorAll('.industry-card');
    this.elements.industryCards.forEach(card => {
      card.addEventListener('click', this.handleCardClick);
      card.addEventListener('keydown', this.handleCardKeydown);
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
   * @private
   */
  showNoResults() {
    const noResultsHTML = `
      <div class="no-results">
        <div class="no-results-icon">üîç</div>
        <h3 class="no-results-title">–ù–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
        <p class="no-results-text">
          –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–î—Ä—É–≥–æ–µ" –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
        </p>
        <button type="button" class="btn btn-outline btn-sm" onclick="this.parentElement.parentElement.querySelector('#industry-search').value = ''; this.parentElement.parentElement.querySelector('#industry-search').dispatchEvent(new Event('input'))">
          –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
        </button>
      </div>
    `;
    
    this.elements.industriesGrid.innerHTML = noResultsHTML;
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
   * @private
   */
  clearSearch() {
    if (this.elements.searchInput) {
      this.elements.searchInput.value = '';
      this.elements.searchInput.focus();
    }
    
    if (this.elements.searchClear) {
      this.elements.searchClear.style.display = 'none';
    }
    
    this.searchTerm = '';
    this.filterIndustries('');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ
   * @private
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
   */
  handleCardClick(event) {
    const card = event.currentTarget;
    const industryKey = card.dataset.industry;
    
    if (industryKey) {
      this.selectIndustry(industryKey);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º
   * @private
   * @param {KeyboardEvent} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  handleCardKeydown(event) {
    if (event.key === 'Enter' || event.key === ' ') {
      event.preventDefault();
      this.handleCardClick(event);
    }
  }

  /**
   * –í—ã–±–æ—Ä –æ—Ç—Ä–∞—Å–ª–∏
   * @public
   * @param {string} industryKey - –ö–ª—é—á –æ—Ç—Ä–∞—Å–ª–∏
   */
  selectIndustry(industryKey) {
    const industry = this.industries[industryKey];
    
    if (!industry) {
      console.warn(`IndustrySelector: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—Ç—Ä–∞—Å–ª—å ${industryKey}`);
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä
    this.selectedIndustry = industry;

    // –û–±–Ω–æ–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    this.updateSelectionState();

    // –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å custom input
    if (industry.customInput) {
      this.showCustomInput();
    } else {
      this.hideCustomInput();
    }

    // –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É Next
    this.enableNextButton();

    // –í—ã–∑–≤–∞—Ç—å –∫–æ–ª–±—ç–∫
    this.onSelect(industryKey, industry);

    // Dispatch —Å–æ–±—ã—Ç–∏—è
    this.dispatchEvent('industrySelected', {
      industryKey,
      industry,
      hasCustomInput: !!industry.customInput
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—ã–±–æ—Ä–∞
   * @private
   */
  updateSelectionState() {
    this.elements.industryCards.forEach(card => {
      const isSelected = card.dataset.industry === this.selectedIndustry?.key;
      
      card.classList.toggle('selected', isSelected);
      card.setAttribute('aria-pressed', isSelected);
      
      // –û–±–Ω–æ–≤–∏—Ç—å checkmark
      const existingCheckmark = card.querySelector('.card-checkmark');
      if (isSelected && !existingCheckmark) {
        const checkmark = document.createElement('div');
        checkmark.className = 'card-checkmark';
        checkmark.setAttribute('aria-hidden', 'true');
        checkmark.textContent = '‚úì';
        card.querySelector('.card-header').appendChild(checkmark);
      } else if (!isSelected && existingCheckmark) {
        existingCheckmark.remove();
      }
    });
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å custom input
   * @private
   */
  showCustomInput() {
    if (this.elements.customInputSection) {
      this.elements.customInputSection.style.display = 'block';
      this.elements.customInput.focus();
    }
  }

  /**
   * –°–∫—Ä—ã—Ç—å custom input
   * @private
   */
  hideCustomInput() {
    if (this.elements.customInputSection) {
      this.elements.customInputSection.style.display = 'none';
      this.elements.customInput.value = '';
      this.clearCustomInputError();
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤ custom input
   * @private
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ input
   */
  handleCustomInput(event) {
    const value = event.target.value.trim();
    
    if (this.selectedIndustry?.customInput) {
      this.selectedIndustry.customValue = value;
      this.selectedIndustry.title = value || '–î—Ä—É–≥–æ–µ';
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      if (value.length >= 2) {
        this.enableNextButton();
        this.clearCustomInputError();
      } else {
        this.disableNextButton();
        this.showCustomInputError('–£–∫–∞–∂–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)');
      }
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è custom input
   * @private
   */
  validateCustomInput() {
    if (!this.selectedIndustry?.customInput) return true;
    
    const value = this.elements.customInput.value.trim();
    
    if (value.length < 2) {
      this.showCustomInputError('–£–∫–∞–∂–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)');
      return false;
    }
    
    if (value.length > 50) {
      this.showCustomInputError('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)');
      return false;
    }
    
    this.clearCustomInputError();
    return true;
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É custom input
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  showCustomInputError(message) {
    if (this.elements.customInputError) {
      this.elements.customInputError.textContent = message;
      this.elements.customInputError.style.display = 'block';
    }
    
    if (this.elements.customInput) {
      this.elements.customInput.classList.add('error');
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É custom input
   * @private
   */
  clearCustomInputError() {
    if (this.elements.customInputError) {
      this.elements.customInputError.style.display = 'none';
    }
    
    if (this.elements.customInput) {
      this.elements.customInput.classList.remove('error');
    }
  }

  /**
   * –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É Next
   * @private
   */
  enableNextButton() {
    if (this.elements.nextBtn) {
      this.elements.nextBtn.disabled = false;
      this.elements.nextBtn.classList.add('enabled');
    }
    
    if (this.elements.nextBtnHelp) {
      this.elements.nextBtnHelp.textContent = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è';
    }
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É Next
   * @private
   */
  disableNextButton() {
    if (this.elements.nextBtn) {
      this.elements.nextBtn.disabled = true;
      this.elements.nextBtn.classList.remove('enabled');
    }
    
    if (this.elements.nextBtnHelp) {
      this.elements.nextBtnHelp.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è';
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ Next
   * @private
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
   */
  handleNextClick(event) {
    event.preventDefault();
    
    if (!this.selectedIndustry) {
      this.showError('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è');
      return;
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è custom input
    if (this.selectedIndustry.customInput && !this.validateCustomInput()) {
      return;
    }
    
    const selectionData = {
      industryKey: this.selectedIndustry.key,
      industry: this.selectedIndustry,
      customValue: this.selectedIndustry.customValue || null,
      metrics: this.selectedIndustry.metrics,
      timestamp: new Date().toISOString()
    };
    
    // –í—ã–∑–≤–∞—Ç—å –∫–æ–ª–±—ç–∫
    this.onNext(selectionData);
    
    // Dispatch —Å–æ–±—ã—Ç–∏—è
    this.dispatchEvent('industryConfirmed', selectionData);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π
   * @private
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π
   */
  getPopularIndustries() {
    return Object.values(this.industries)
      .filter(industry => industry.popular)
      .slice(0, this.options.popularLimit);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏
   * @public
   * @returns {Object|null} –î–∞–Ω–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏ –∏–ª–∏ null
   */
  getSelectedIndustry() {
    return this.selectedIndustry;
  }

  /**
   * –ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏
   * @public
   * @param {string} industryKey - –ö–ª—é—á –æ—Ç—Ä–∞—Å–ª–∏
   */
  setSelectedIndustry(industryKey) {
    this.selectIndustry(industryKey);
  }

  /**
   * –°–±—Ä–æ—Å –≤—ã–±–æ—Ä–∞
   * @public
   */
  reset() {
    this.selectedIndustry = null;
    this.clearSearch();
    this.hideCustomInput();
    this.disableNextButton();
    this.updateSelectionState();
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  showError(message) {
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast notification –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    console.error('IndustrySelector:', message);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
   * @private
   * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Object} detail - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  dispatchEvent(eventName, detail = {}) {
    const event = new CustomEvent(eventName, {
      detail,
      bubbles: true,
      cancelable: true
    });
    
    this.container.dispatchEvent(event);
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—à–∏–±–∫–∏
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  renderError(message) {
    this.container.innerHTML = `
      <div class="industry-selector-error">
        <div class="error-icon">‚ö†Ô∏è</div>
        <div class="error-message">
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –æ—Ç—Ä–∞—Å–ª–µ–π</h3>
          <p>${message}</p>
          <button onclick="location.reload()" class="btn btn-primary btn-sm">
            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      </div>
    `;
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @public
   */
  destroy() {
    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    if (this.elements.searchInput) {
      this.elements.searchInput.removeEventListener('input', this.handleSearch);
    }
    
    if (this.elements.searchClear) {
      this.elements.searchClear.removeEventListener('click', this.clearSearch);
    }
    
    this.elements.industryCards.forEach(card => {
      card.removeEventListener('click', this.handleCardClick);
      card.removeEventListener('keydown', this.handleCardKeydown);
    });
    
    if (this.elements.nextBtn) {
      this.elements.nextBtn.removeEventListener('click', this.handleNextClick);
    }
    
    if (this.elements.customInput) {
      this.elements.customInput.removeEventListener('input', this.handleCustomInput);
    }
    
    // –û—á–∏—Å—Ç–∫–∞ DOM
    this.container.innerHTML = '';
    
    // Dispatch —Å–æ–±—ã—Ç–∏—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
    this.dispatchEvent('industrySelectorDestroyed', {
      selectedIndustry: this.selectedIndustry
    });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = IndustrySelector;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
if (typeof window !== 'undefined') {
  window.IndustrySelector = IndustrySelector;
} 