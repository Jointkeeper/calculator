/**
 * ProgressBar Component –¥–ª—è Universal Calculator
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º 6-—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—á–µ—Ç–∞
 * 
 * @class ProgressBar
 * @author Steamphony Digital Agency
 */
class ProgressBar {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ProgressBar
   * 
   * @param {HTMLElement} container - DOM —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @param {number} totalSteps - –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 6)
   * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   */
  constructor(container, totalSteps = 6, options = {}) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!container || !(container instanceof HTMLElement)) {
      throw new Error('ProgressBar: container –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç–æ–º');
    }

    if (totalSteps < 1 || totalSteps > 10) {
      throw new Error('ProgressBar: totalSteps –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10');
    }

    // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    this.container = container;
    this.totalSteps = totalSteps;
    this.currentStep = 1;
    this.isAnimating = false;

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —à–∞–≥–æ–≤
    this.steps = [
      { id: 1, title: '–û—Ç—Ä–∞—Å–ª—å', shortTitle: '–û—Ç—Ä–∞—Å–ª—å', icon: 'üè¢', description: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ç—Ä–∞—Å–ª—å' },
      { id: 2, title: '–†–∞–∑–º–µ—Ä', shortTitle: '–†–∞–∑–º–µ—Ä', icon: 'üìä', description: '–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏' },
      { id: 3, title: '–ë—é–¥–∂–µ—Ç', shortTitle: '–ë—é–¥–∂–µ—Ç', icon: 'üí∞', description: '–¢–µ–∫—É—â–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç' },
      { id: 4, title: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', shortTitle: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', icon: 'üõ†Ô∏è', description: '–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' },
      { id: 5, title: '–†–µ–∑—É–ª—å—Ç–∞—Ç', shortTitle: '–†–µ–∑—É–ª—å—Ç–∞—Ç', icon: 'üìà', description: '–†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏' },
      { id: 6, title: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', shortTitle: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', icon: 'üìû', description: '–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã' }
    ];

    // –û–ø—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    this.options = {
      animationDuration: 300,
      allowClickNavigation: true,
      showPercentage: true,
      showStepNumbers: true,
      enableKeyboardNavigation: true,
      trackAnalytics: true,
      ...options
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    this.handleStepClick = this.handleStepClick.bind(this);
    this.handleKeyboardNavigation = this.handleKeyboardNavigation.bind(this);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    this.init();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @private
   */
  init() {
    try {
      this.render();
      this.attachEventListeners();
      this.updateProgress(this.currentStep, { animate: false });
      
      // Dispatch –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
      this.dispatchEvent('progressBarReady', {
        totalSteps: this.totalSteps,
        currentStep: this.currentStep
      });
    } catch (error) {
      console.error('ProgressBar: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.renderError(error.message);
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   * @private
   */
  render() {
    const progressHTML = `
      <div class="progress-bar-wrapper" role="progressbar" 
           aria-valuemin="1" 
           aria-valuemax="${this.totalSteps}" 
           aria-valuenow="${this.currentStep}"
           aria-label="–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞">
        
        <!-- Progress Info -->
        <div class="progress-info">
          <div class="progress-text">
            <span class="progress-current">–®–∞–≥ ${this.currentStep} –∏–∑ ${this.totalSteps}</span>
            ${this.options.showPercentage ? `<span class="progress-percentage">${this.getPercentage()}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>` : ''}
          </div>
          <div class="progress-description">
            <span class="progress-step-title">${this.steps[this.currentStep - 1].title}</span>
            <span class="progress-step-description">${this.steps[this.currentStep - 1].description}</span>
          </div>
        </div>

        <!-- Progress Bar -->
        <div class="progress-track">
          <div class="progress-fill" style="width: ${this.getPercentage()}%"></div>
        </div>

        <!-- Step Indicators -->
        <div class="progress-steps">
          ${this.steps.map(step => this.renderStep(step)).join('')}
        </div>
      </div>
    `;

    this.container.innerHTML = progressHTML;
    this.cacheElements();
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —à–∞–≥–∞
   * @private
   * @param {Object} step - –î–∞–Ω–Ω—ã–µ —à–∞–≥–∞
   * @returns {string} HTML —à–∞–≥–∞
   */
  renderStep(step) {
    const isCompleted = step.id < this.currentStep;
    const isCurrent = step.id === this.currentStep;
    const isClickable = this.options.allowClickNavigation && (isCompleted || isCurrent);

    return `
      <div class="progress-step ${isCompleted ? 'completed' : ''} ${isCurrent ? 'current' : ''} ${isClickable ? 'clickable' : ''}"
           data-step="${step.id}"
           ${isClickable ? 'tabindex="0"' : ''}
           role="button"
           aria-label="${step.title}${isCompleted ? ' (–∑–∞–≤–µ—Ä—à–µ–Ω)' : isCurrent ? ' (—Ç–µ–∫—É—â–∏–π)' : ''}"
           aria-current="${isCurrent ? 'step' : 'false'}">
        
        <div class="step-indicator">
          ${isCompleted ? 
            '<svg class="step-check" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>' :
            this.options.showStepNumbers ? `<span class="step-number">${step.id}</span>` : `<span class="step-icon">${step.icon}</span>`
          }
        </div>
        
        <div class="step-label">
          <span class="step-title">${step.title}</span>
          <span class="step-title-mobile">${step.shortTitle}</span>
        </div>
      </div>
    `;
  }

  /**
   * –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * @private
   */
  cacheElements() {
    this.elements = {
      wrapper: this.container.querySelector('.progress-bar-wrapper'),
      progressFill: this.container.querySelector('.progress-fill'),
      progressText: this.container.querySelector('.progress-current'),
      progressPercentage: this.container.querySelector('.progress-percentage'),
      progressTitle: this.container.querySelector('.progress-step-title'),
      progressDescription: this.container.querySelector('.progress-step-description'),
      steps: this.container.querySelectorAll('.progress-step')
    };
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
   * @private
   */
  attachEventListeners() {
    // Click navigation
    if (this.options.allowClickNavigation) {
      this.elements.steps.forEach(step => {
        step.addEventListener('click', this.handleStepClick);
        step.addEventListener('keydown', (e) => {
          if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            this.handleStepClick(e);
          }
        });
      });
    }

    // Keyboard navigation
    if (this.options.enableKeyboardNavigation) {
      this.container.addEventListener('keydown', this.handleKeyboardNavigation);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —à–∞–≥—É
   * @private
   * @param {Event} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
   */
  handleStepClick(event) {
    const stepElement = event.currentTarget;
    const stepNumber = parseInt(stepElement.dataset.step);
    
    if (this.isValidNavigation(stepNumber)) {
      this.updateProgress(stepNumber, { source: 'click' });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   * @private
   * @param {KeyboardEvent} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
   */
  handleKeyboardNavigation(event) {
    if (this.isAnimating) return;

    switch (event.key) {
      case 'ArrowRight':
      case 'ArrowDown':
        event.preventDefault();
        this.nextStep();
        break;
      case 'ArrowLeft':
      case 'ArrowUp':
        event.preventDefault();
        this.previousStep();
        break;
      case 'Home':
        event.preventDefault();
        this.updateProgress(1, { source: 'keyboard' });
        break;
      case 'End':
        event.preventDefault();
        this.updateProgress(this.totalSteps, { source: 'keyboard' });
        break;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   * @private
   * @param {number} targetStep - –¶–µ–ª–µ–≤–æ–π —à–∞–≥
   * @returns {boolean} –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —à–∞–≥—É
   */
  isValidNavigation(targetStep) {
    return targetStep >= 1 && 
           targetStep <= this.totalSteps && 
           targetStep <= this.currentStep + 1 && // –ú–æ–∂–Ω–æ –∏–¥—Ç–∏ —Ç–æ–ª—å–∫–æ –≤–ø–µ—Ä–µ–¥ –Ω–∞ 1 —à–∞–≥ –∏–ª–∏ –Ω–∞–∑–∞–¥
           !this.isAnimating;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
   * @public
   * @param {number} newStep - –ù–æ–≤—ã–π —à–∞–≥ (1-6)
   * @param {Object} options - –û–ø—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
   */
  updateProgress(newStep, options = {}) {
    const config = {
      animate: true,
      source: 'api',
      ...options
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (newStep < 1 || newStep > this.totalSteps) {
      console.warn(`ProgressBar: –ù–µ–≤–µ—Ä–Ω—ã–π —à–∞–≥ ${newStep}. –î–æ–ø—É—Å—Ç–∏–º—ã —à–∞–≥–∏ –æ—Ç 1 –¥–æ ${this.totalSteps}`);
      return;
    }

    if (this.isAnimating && config.animate) {
      console.warn('ProgressBar: –ê–Ω–∏–º–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      return;
    }

    const previousStep = this.currentStep;
    this.currentStep = newStep;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    this.updateProgressUI(config.animate);

    // Dispatch —Å–æ–±—ã—Ç–∏—è
    this.dispatchEvent('stepNavigated', {
      previousStep,
      currentStep: this.currentStep,
      totalSteps: this.totalSteps,
      percentage: this.getPercentage(),
      source: config.source
    });

    // Analytics tracking
    if (this.options.trackAnalytics) {
      this.trackAnalytics(previousStep, this.currentStep, config.source);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * @private
   * @param {boolean} animate - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
   */
  updateProgressUI(animate = true) {
    if (animate) {
      this.isAnimating = true;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ progress bar
    const percentage = this.getPercentage();
    this.elements.progressFill.style.width = `${percentage}%`;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    this.elements.progressText.textContent = `–®–∞–≥ ${this.currentStep} –∏–∑ ${this.totalSteps}`;
    
    if (this.elements.progressPercentage) {
      this.elements.progressPercentage.textContent = `${percentage}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    const currentStepData = this.steps[this.currentStep - 1];
    this.elements.progressTitle.textContent = currentStepData.title;
    this.elements.progressDescription.textContent = currentStepData.description;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ ARIA –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    this.elements.wrapper.setAttribute('aria-valuenow', this.currentStep);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ —à–∞–≥–æ–≤
    this.elements.steps.forEach((stepElement, index) => {
      const stepNumber = index + 1;
      const isCompleted = stepNumber < this.currentStep;
      const isCurrent = stepNumber === this.currentStep;

      stepElement.classList.toggle('completed', isCompleted);
      stepElement.classList.toggle('current', isCurrent);
      stepElement.setAttribute('aria-current', isCurrent ? 'step' : 'false');

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏/–Ω–æ–º–µ—Ä–∞ —à–∞–≥–∞
      const indicator = stepElement.querySelector('.step-indicator');
      if (isCompleted) {
        indicator.innerHTML = '<svg class="step-check" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>';
      } else if (this.options.showStepNumbers) {
        indicator.innerHTML = `<span class="step-number">${stepNumber}</span>`;
      } else {
        indicator.innerHTML = `<span class="step-icon">${this.steps[index].icon}</span>`;
      }
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    if (animate) {
      setTimeout(() => {
        this.isAnimating = false;
      }, this.options.animationDuration);
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
   * @public
   * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞
   */
  nextStep() {
    if (this.currentStep < this.totalSteps) {
      this.updateProgress(this.currentStep + 1, { source: 'next' });
      return true;
    }
    return false;
  }

  /**
   * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
   * @public
   * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ö–æ–¥–∞
   */
  previousStep() {
    if (this.currentStep > 1) {
      this.updateProgress(this.currentStep - 1, { source: 'previous' });
      return true;
    }
    return false;
  }

  /**
   * –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫ –ø–µ—Ä–≤–æ–º—É —à–∞–≥—É
   * @public
   */
  reset() {
    this.updateProgress(1, { source: 'reset' });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
   * @public
   * @returns {number} –¢–µ–∫—É—â–∏–π —à–∞–≥
   */
  getCurrentStep() {
    return this.currentStep;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   * @public
   * @returns {number} –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
   */
  getPercentage() {
    return Math.round((this.currentStep / this.totalSteps) * 100);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
   * @public
   * @returns {Object} –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
   */
  getProgressInfo() {
    return {
      currentStep: this.currentStep,
      totalSteps: this.totalSteps,
      percentage: this.getPercentage(),
      isCompleted: this.currentStep === this.totalSteps,
      currentStepData: this.steps[this.currentStep - 1]
    };
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–π
   * @public
   * @param {Object} newOptions - –ù–æ–≤—ã–µ –æ–ø—Ü–∏–∏
   */
  setOptions(newOptions) {
    this.options = { ...this.options, ...newOptions };
    this.render(); // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å –Ω–æ–≤—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
   * @public
   */
  destroy() {
    // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    this.elements.steps.forEach(step => {
      step.removeEventListener('click', this.handleStepClick);
    });
    
    this.container.removeEventListener('keydown', this.handleKeyboardNavigation);
    
    // –û—á–∏—Å—Ç–∫–∞ DOM
    this.container.innerHTML = '';
    
    // Dispatch —Å–æ–±—ã—Ç–∏—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è
    this.dispatchEvent('progressBarDestroyed', {
      finalStep: this.currentStep,
      totalSteps: this.totalSteps
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
   * @private
   * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Object} detail - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  dispatchEvent(eventName, detail = {}) {
    const event = new CustomEvent(eventName, {
      detail,
      bubbles: true,
      cancelable: true
    });
    
    this.container.dispatchEvent(event);
  }

  /**
   * –¢—Ä–µ–∫–∏–Ω–≥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   * @private
   * @param {number} from - –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
   * @param {number} to - –¢–µ–∫—É—â–∏–π —à–∞–≥
   * @param {string} source - –ò—Å—Ç–æ—á–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞
   */
  trackAnalytics(from, to, source) {
    // Placeholder –¥–ª—è Google Analytics / –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏
    if (typeof gtag !== 'undefined') {
      gtag('event', 'progress_navigation', {
        event_category: 'Calculator',
        event_label: `Step ${from} to ${to}`,
        custom_parameter_1: source,
        value: to
      });
    }
    
    // Placeholder –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–ú–µ—Ç—Ä–∏–∫–∏
    if (typeof ym !== 'undefined') {
      ym('reachGoal', 'progress_step', {
        step: to,
        previous_step: from,
        source: source
      });
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –æ—à–∏–±–∫–∏
   * @private
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  renderError(message) {
    this.container.innerHTML = `
      <div class="progress-bar-error">
        <div class="error-icon">‚ö†Ô∏è</div>
        <div class="error-message">
          <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞</h3>
          <p>${message}</p>
          <button onclick="location.reload()" class="btn btn-primary btn-sm">
            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
          </button>
        </div>
      </div>
    `;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ProgressBar;
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
if (typeof window !== 'undefined') {
  window.ProgressBar = ProgressBar;
} 