/**
 * ComponentManager - –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

import { AppState } from '../../core/AppState.js?v=1.0.4';

class ComponentManager {
    constructor() {
        this.appState = AppState.getInstance();
        this.components = new Map();
        this.initialized = false;
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    async initialize() {
        if (this.initialized) return;

        try {
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ComponentManager...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await this.initializeProgressBar();
            await this.initializeIndustrySelector();
            await this.initializeBusinessSizeStep();
            await this.initializeMarketingBudgetStep();
            await this.initializeMarketingTeamStep();
            await this.initializeMarketingToolsStep();
            await this.initializeContactFormStep();
            
            this.initialized = true;
            console.log('‚úÖ ComponentManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ComponentManager:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProgressBar
     */
    async initializeProgressBar() {
        try {
            const progressContainer = document.getElementById('progress-container');
            
            if (!progressContainer) {
                console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #progress-container –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ProgressBar');
                return;
            }

            const progressBar = {
                update: (step) => {
                    const progressElement = progressContainer.querySelector('.progress-fill');
                    if (progressElement) {
                        const percentage = (step / 6) * 100;
                        progressElement.style.width = `${percentage}%`;
                    }
                },
                setStep: (step) => {
                    const stepText = progressContainer.querySelector('.progress-current');
                    if (stepText) {
                        stepText.textContent = `–®–∞–≥ ${step} –∏–∑ 6`;
                    }
                    const percentText = progressContainer.querySelector('.progress-percentage');
                    if (percentText) {
                        percentText.textContent = `${Math.round((step / 6) * 100)}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ`;
                    }
                }
            };
            
            this.components.set('progressBar', progressBar);
            console.log('‚úÖ ProgressBar –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProgressBar:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è IndustrySelector
     */
    async initializeIndustrySelector() {
        try {
            const formContent = document.getElementById('form-content');
            
            if (!formContent) {
                console.warn('‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä #form-content –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é IndustrySelector');
                return;
            }
            
            const industrySelector = {
                render: () => {
                    formContent.innerHTML = `
                        <div class="calculator-step active">
                            <h3 class="step-title">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –æ—Ç—Ä–∞—Å–ª—å</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                <button class="industry-card p-4 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-industry="restaurant">
                                    <div class="text-center">
                                        <div class="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center mx-auto mb-3">
                                            <svg class="w-6 h-6 text-orange-600" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                                            </svg>
                                        </div>
                                        <h4 class="font-medium text-gray-900">–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏ –∫–∞—Ñ–µ</h4>
                                        <p class="text-sm text-gray-600 mt-1">–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ</p>
                                    </div>
                                </button>
                                <button class="industry-card p-4 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-industry="retail">
                                    <div class="text-center">
                                        <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-3">
                                            <svg class="w-6 h-6 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M3 3a1 1 0 000 2v8a2 2 0 002 2h2.586l-1.293 1.293a1 1 0 101.414 1.414L10 15.414l2.293 2.293a1 1 0 001.414-1.414L12.414 15H15a2 2 0 002-2V5a1 1 0 100-2H3zm11.707 4.707a1 1 0 00-1.414-1.414L10 9.586 8.707 8.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"/>
                                            </svg>
                                        </div>
                                        <h4 class="font-medium text-gray-900">–†–æ–∑–Ω–∏—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è</h4>
                                        <p class="text-sm text-gray-600 mt-1">–ú–∞–≥–∞–∑–∏–Ω—ã –∏ —Ç–æ—Ä–≥–æ–≤–ª—è</p>
                                    </div>
                                </button>
                                <button class="industry-card p-4 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-industry="services">
                                    <div class="text-center">
                                        <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-3">
                                            <svg class="w-6 h-6 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                                                <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3z"/>
                                            </svg>
                                        </div>
                                        <h4 class="font-medium text-gray-900">–£—Å–ª—É–≥–∏</h4>
                                        <p class="text-sm text-gray-600 mt-1">–°—Ñ–µ—Ä–∞ —É—Å–ª—É–≥</p>
                                    </div>
                                </button>
                            </div>
                            <div class="mt-8 text-center">
                                <p class="text-sm text-gray-600">–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä–∞—Å–ª—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∞—à –±–∏–∑–Ω–µ—Å</p>
                            </div>
                        </div>
                    `;
                    
                    this.setupIndustryEventHandlers();
                }
            };
            
            this.components.set('industrySelector', industrySelector);
            console.log('‚úÖ IndustrySelector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ IndustrySelector:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è IndustrySelector
     */
    setupIndustryEventHandlers() {
        const formContent = document.getElementById('form-content');
        const industryCards = formContent.querySelectorAll('.industry-card');
        industryCards.forEach(card => {
            card.addEventListener('click', () => {
                const industry = card.dataset.industry;
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                industryCards.forEach(c => c.classList.remove('border-steamphony-blue', 'bg-blue-50'));
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
                card.classList.add('border-steamphony-blue', 'bg-blue-50');
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ AppState
                if (window.app && window.app.componentManager) {
                    const title = card.querySelector('h4')?.textContent || industry;
                    window.app.componentManager.appState.updateField('industry', { key: industry, title });
                }
                // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —á–µ—Ä–µ–∑ StepManager
                if (window.app && window.app.stepManager) {
                    window.app.stepManager.nextStep();
                }
            });
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BusinessSizeStep
     */
    async initializeBusinessSizeStep() {
        try {
            const businessSizeStep = {
                render: () => {
                    const formContent = document.getElementById('form-content');
                    if (!formContent) return;

                    formContent.innerHTML = `
                        <div class="calculator-step active">
                            <h3 class="step-title">–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞</h3>
                            <p class="step-description">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</p>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <button class="size-card p-6 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-size="small">
                                    <div class="text-center">
                                        <h4 class="font-semibold text-gray-900 mb-2">–ú–∞–ª—ã–π –±–∏–∑–Ω–µ—Å</h4>
                                        <p class="text-sm text-gray-600">1-10 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>
                                    </div>
                                </button>
                                <button class="size-card p-6 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-size="medium">
                                    <div class="text-center">
                                        <h4 class="font-semibold text-gray-900 mb-2">–°—Ä–µ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å</h4>
                                        <p class="text-sm text-gray-600">11-50 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>
                                    </div>
                                </button>
                                <button class="size-card p-6 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-size="large">
                                    <div class="text-center">
                                        <h4 class="font-semibold text-gray-900 mb-2">–ö—Ä—É–ø–Ω—ã–π –±–∏–∑–Ω–µ—Å</h4>
                                        <p class="text-sm text-gray-600">50+ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>
                                    </div>
                                </button>
                            </div>
                        </div>
                    `;
                    
                    this.setupBusinessSizeEventHandlers();
                }
            };
            
            this.components.set('businessSizeStep', businessSizeStep);
            console.log('‚úÖ BusinessSizeStep –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BusinessSizeStep:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è BusinessSizeStep
     */
    setupBusinessSizeEventHandlers() {
        const formContent = document.getElementById('form-content');
        const sizeCards = formContent.querySelectorAll('.size-card');
        
        sizeCards.forEach(card => {
            card.addEventListener('click', () => {
                const size = card.dataset.size;
                // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
                sizeCards.forEach(c => c.classList.remove('border-steamphony-blue', 'bg-blue-50'));
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
                card.classList.add('border-steamphony-blue', 'bg-blue-50');
                
                if (window.app && window.app.eventHandler) {
                    window.app.eventHandler.handleBusinessSizeSelect(size);
                    window.app.eventHandler.handleBusinessSizeNext({ size });
                }
            });
        });
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
     */
    async initializeMarketingBudgetStep() {
        const marketingBudgetStep = {
            render: () => {
                const formContent = document.getElementById('form-content');
                if (!formContent) return;

                formContent.innerHTML = `
                    <div class="calculator-step active">
                        <h3 class="step-title">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç</h3>
                        <p class="step-description">–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥</p>
                        <div class="space-y-4">
                            <input type="range" id="budget-slider" min="50000" max="1000000" step="50000" value="200000" class="w-full">
                            <div class="text-center">
                                <span id="budget-value" class="text-2xl font-bold text-steamphony-primary">200,000 ‚ÇΩ</span>
                                <p class="text-sm text-gray-600">–≤ –º–µ—Å—è—Ü</p>
                            </div>
                        </div>
                    </div>
                `;
                
                this.setupBudgetEventHandlers();
            }
        };
        
        this.components.set('marketingBudgetStep', marketingBudgetStep);
        console.log('‚úÖ MarketingBudgetStep –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupBudgetEventHandlers() {
        const slider = document.getElementById('budget-slider');
        const valueDisplay = document.getElementById('budget-value');
        
        if (slider && valueDisplay) {
            slider.addEventListener('input', (e) => {
                const value = parseInt(e.target.value);
                valueDisplay.textContent = `${value.toLocaleString()} ‚ÇΩ`;
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            const formContent = document.getElementById('form-content');
            const navButtons = document.createElement('div');
            navButtons.className = 'nav-buttons';
            navButtons.innerHTML = `
                <button class="nav-button secondary" onclick="window.app.eventHandler.handleMarketingBudgetBack()">–ù–∞–∑–∞–¥</button>
                <button class="nav-button primary" onclick="window.app.eventHandler.handleMarketingBudgetNext({ budget: ${slider.value} })">–î–∞–ª–µ–µ</button>
            `;
            formContent.appendChild(navButtons);
        }
    }

    async initializeMarketingTeamStep() {
        const marketingTeamStep = {
            render: () => {
                const formContent = document.getElementById('form-content');
                if (!formContent) return;

                formContent.innerHTML = `
                    <div class="calculator-step active">
                        <h3 class="step-title">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞</h3>
                        <p class="step-description">–°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ?</p>
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <button class="team-card p-4 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-team="1">
                                <div class="text-center">
                                    <h4 class="font-semibold text-gray-900">1 —á–µ–ª–æ–≤–µ–∫</h4>
                                    <p class="text-sm text-gray-600">–°–∞–º–æ–∑–∞–Ω—è—Ç—ã–π</p>
                                </div>
                            </button>
                            <button class="team-card p-4 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-team="2-5">
                                <div class="text-center">
                                    <h4 class="font-semibold text-gray-900">2-5 —á–µ–ª–æ–≤–µ–∫</h4>
                                    <p class="text-sm text-gray-600">–ù–µ–±–æ–ª—å—à–∞—è –∫–æ–º–∞–Ω–¥–∞</p>
                                </div>
                            </button>
                            <button class="team-card p-4 border border-gray-200 rounded-lg hover:border-steamphony-blue hover:bg-blue-50 transition-colors" data-team="5+">
                                <div class="text-center">
                                    <h4 class="font-semibold text-gray-900">5+ —á–µ–ª–æ–≤–µ–∫</h4>
                                    <p class="text-sm text-gray-600">–ë–æ–ª—å—à–∞—è –∫–æ–º–∞–Ω–¥–∞</p>
                                </div>
                            </button>
                        </div>
                    </div>
                `;
                
                this.setupTeamEventHandlers();
            }
        };
        
        this.components.set('marketingTeamStep', marketingTeamStep);
        console.log('‚úÖ MarketingTeamStep –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupTeamEventHandlers() {
        const formContent = document.getElementById('form-content');
        const teamCards = formContent.querySelectorAll('.team-card');
        
        teamCards.forEach(card => {
            card.addEventListener('click', () => {
                const team = card.dataset.team;
                teamCards.forEach(c => c.classList.remove('border-steamphony-blue', 'bg-blue-50'));
                card.classList.add('border-steamphony-blue', 'bg-blue-50');
                
                if (window.app && window.app.eventHandler) {
                    window.app.eventHandler.handleMarketingTeamSelect({ team });
                    window.app.eventHandler.handleMarketingTeamNext({ team });
                }
            });
        });
    }

    async initializeMarketingToolsStep() {
        const marketingToolsStep = {
            render: () => {
                const formContent = document.getElementById('form-content');
                if (!formContent) return;

                formContent.innerHTML = `
                    <div class="calculator-step active">
                        <h3 class="step-title">–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</h3>
                        <p class="step-description">–ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞?</p>
                        <div class="space-y-3">
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" value="social" class="rounded">
                                <span>–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏</span>
                            </label>
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" value="ads" class="rounded">
                                <span>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞</span>
                            </label>
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" value="seo" class="rounded">
                                <span>SEO</span>
                            </label>
                            <label class="flex items-center space-x-3">
                                <input type="checkbox" value="email" class="rounded">
                                <span>Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥</span>
                            </label>
                        </div>
                    </div>
                `;
                
                this.setupToolsEventHandlers();
            }
        };
        
        this.components.set('marketingToolsStep', marketingToolsStep);
        console.log('‚úÖ MarketingToolsStep –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupToolsEventHandlers() {
        const formContent = document.getElementById('form-content');
        const navButtons = document.createElement('div');
        navButtons.className = 'nav-buttons';
        navButtons.innerHTML = `
            <button class="nav-button secondary" onclick="window.app.eventHandler.handleMarketingToolsBack()">–ù–∞–∑–∞–¥</button>
            <button class="nav-button primary" onclick="window.app.eventHandler.handleMarketingToolsNext({ tools: this.getSelectedTools() })">–î–∞–ª–µ–µ</button>
        `;
        formContent.appendChild(navButtons);
    }

    async initializeContactFormStep() {
        const contactFormStep = {
            render: () => {
                const formContent = document.getElementById('form-content');
                if (!formContent) return;

                formContent.innerHTML = `
                    <div class="calculator-step active">
                        <h3 class="step-title">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                        <p class="step-description">–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</p>
                        <div class="space-y-4">
                            <input type="text" placeholder="–í–∞—à–µ –∏–º—è" class="w-full p-3 border border-gray-300 rounded-lg">
                            <input type="email" placeholder="Email" class="w-full p-3 border border-gray-300 rounded-lg">
                            <input type="tel" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω" class="w-full p-3 border border-gray-300 rounded-lg">
                        </div>
                    </div>
                `;
                
                this.setupContactEventHandlers();
            }
        };
        
        this.components.set('contactFormStep', contactFormStep);
        console.log('‚úÖ ContactFormStep –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    setupContactEventHandlers() {
        const formContent = document.getElementById('form-content');
        const navButtons = document.createElement('div');
        navButtons.className = 'nav-buttons';
        navButtons.innerHTML = `
            <button class="nav-button secondary" onclick="window.app.eventHandler.handleContactFormBack()">–ù–∞–∑–∞–¥</button>
            <button class="nav-button primary" onclick="window.app.eventHandler.handleContactFormSubmit(this.getContactData())">–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</button>
        `;
        formContent.appendChild(navButtons);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
     */
    getComponent(name) {
        return this.components.get(name);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
     */
    showComponent(name) {
        const component = this.components.get(name);
        if (component && component.render) {
            component.render();
        }
    }

    /**
     * –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
     */
    reset() {
        this.components.clear();
        this.initialized = false;
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        this.reset();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const componentManager = new ComponentManager();