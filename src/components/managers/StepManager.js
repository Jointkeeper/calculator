/**
 * StepManager - –ú–µ–Ω–µ–¥–∂–µ—Ä —à–∞–≥–æ–≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */

import { AppState } from '../../core/AppState.js?v=1.0.4';
import { NavigationManager } from '../../managers/NavigationManager.js?v=1.0.4';

class StepManager {
    constructor() {
        this.appState = AppState.getInstance();
        this.navigationManager = NavigationManager.getInstance();
        this.currentStep = 1;
        this.totalSteps = 6;
        this.stepComponents = new Map();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–≥–æ–≤
     */
    async initialize() {
        try {
            console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StepManager...');
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —à–∞–≥–æ–≤
            this.setupStepComponents();
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
            this.subscribeToStateChanges();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
            this.showStep(1);
            
            console.log('‚úÖ StepManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ StepManager:', error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —à–∞–≥–æ–≤
     */
    setupStepComponents() {
        this.stepComponents.set(1, 'industrySelector');
        this.stepComponents.set(2, 'businessSizeStep');
        this.stepComponents.set(3, 'marketingBudgetStep');
        this.stepComponents.set(4, 'marketingTeamStep');
        this.stepComponents.set(5, 'marketingToolsStep');
        this.stepComponents.set(6, 'contactFormStep');
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    subscribeToStateChanges() {
        this.appState.subscribe('currentStep', (step) => {
            this.updateStepDisplay(step);
        });
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–≥–∞
     */
    updateStepDisplay(step) {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            this.updateProgressBar(step);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            this.updatePageTitle(step);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            this.showStepComponent(step);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —à–∞–≥–∞:', error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
     */
    updateProgressBar(step) {
        const progressBar = window.app?.componentManager?.getComponent('progressBar');
        if (progressBar) {
            progressBar.update(step);
            progressBar.setStep(step);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    updatePageTitle(step) {
        const titles = {
            1: '–í—ã–±–æ—Ä –æ—Ç—Ä–∞—Å–ª–∏',
            2: '–†–∞–∑–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞',
            3: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –±—é–¥–∂–µ—Ç',
            4: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞',
            5: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
            6: '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'
        };
        
        const title = titles[step] || '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —ç–∫–æ–Ω–æ–º–∏–∏';
        document.title = `${title} - Steamphony`;
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —à–∞–≥–∞
     */
    showStepComponent(step) {
        try {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —à–∞–≥–∏
            this.hideAllSteps();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —à–∞–≥
            const componentName = this.stepComponents.get(step);
            if (componentName) {
                const componentManager = window.app?.componentManager;
                if (componentManager) {
                    componentManager.showComponent(componentName);
                }
            }
            
            this.currentStep = step;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —à–∞–≥–∞:', error);
        }
    }

    /**
     * –°–∫—Ä—ã—Ç—å –≤—Å–µ —à–∞–≥–∏
     */
    hideAllSteps() {
        const formContent = document.getElementById('form-content');
        if (formContent) {
            const steps = formContent.querySelectorAll('.calculator-step');
            steps.forEach(step => {
                step.classList.remove('active');
            });
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —à–∞–≥
     */
    showStep(step) {
        if (step >= 1 && step <= this.totalSteps) {
            this.appState.setCurrentStep(step);
        }
    }

    /**
     * –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
     */
    nextStep() {
        const nextStep = Math.min(this.currentStep + 1, this.totalSteps);
        this.showStep(nextStep);
    }

    /**
     * –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
     */
    previousStep() {
        const prevStep = Math.max(this.currentStep - 1, 1);
        this.showStep(prevStep);
    }

    /**
     * –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —à–∞–≥—É
     */
    goToStep(step) {
        this.showStep(step);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
     */
    getCurrentStep() {
        return this.currentStep;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —à–∞–≥–æ–≤
     */
    getTotalSteps() {
        return this.totalSteps;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–≥ –ø–æ—Å–ª–µ–¥–Ω–∏–º
     */
    isLastStep() {
        return this.currentStep === this.totalSteps;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —à–∞–≥ –ø–µ—Ä–≤—ã–º
     */
    isFirstStep() {
        return this.currentStep === 1;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     */
    onCalculatorComplete() {
        try {
            console.log('üéâ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            this.showResults();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            this.appState.setCalculatorCompleted(true);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
     */
    showResults() {
        const formContent = document.getElementById('form-content');
        if (!formContent) return;

        const formData = this.appState.getFormData();
        const results = this.calculateResults(formData);

        formContent.innerHTML = `
            <div class="calculator-step active">
                <div class="results-container">
                    <div class="savings-amount">${this.formatCurrency(results.totalSavings)}</div>
                    <div class="savings-label">–í–∞—à–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è –≤ –º–µ—Å—è—Ü</div>
                    
                    <div class="savings-breakdown">
                        <div class="breakdown-item">
                            <span class="breakdown-label">–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö</span>
                            <span class="breakdown-value">${this.formatCurrency(results.toolsSavings)}</span>
                        </div>
                        <div class="breakdown-item">
                            <span class="breakdown-label">–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –≤—Ä–µ–º–µ–Ω–∏</span>
                            <span class="breakdown-value">${this.formatCurrency(results.timeSavings)}</span>
                        </div>
                        <div class="breakdown-item">
                            <span class="breakdown-label">–≠–∫–æ–Ω–æ–º–∏—è –Ω–∞ –æ—à–∏–±–∫–∞—Ö</span>
                            <span class="breakdown-value">${this.formatCurrency(results.errorSavings)}</span>
                        </div>
                        <div class="breakdown-item">
                            <span class="breakdown-label">–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è</span>
                            <span class="breakdown-value">${this.formatCurrency(results.totalSavings)}</span>
                        </div>
                    </div>
                    
                    <div class="mt-8">
                        <p class="text-gray-600 mb-4">–ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏</p>
                        <button class="nav-button primary" onclick="window.app.eventHandler.handleGetReport()">
                            –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç
                        </button>
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    calculateResults(formData) {
        const budget = formData.budget || 200000;
        const teamSize = formData.team || '1';
        
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏
        const toolsSavings = budget * 0.15; // 15% —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        const timeSavings = budget * 0.25; // 25% —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        const errorSavings = budget * 0.10; // 10% —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –æ—à–∏–±–∫–∞—Ö
        
        const totalSavings = toolsSavings + timeSavings + errorSavings;
        
        return {
            toolsSavings: Math.round(toolsSavings),
            timeSavings: Math.round(timeSavings),
            errorSavings: Math.round(errorSavings),
            totalSavings: Math.round(totalSavings)
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
     */
    formatCurrency(amount) {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    }

    /**
     * –°–±—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —à–∞–≥–æ–≤
     */
    reset() {
        this.currentStep = 1;
        this.stepComponents.clear();
        this.setupStepComponents();
    }

    /**
     * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    destroy() {
        this.reset();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export const stepManager = new StepManager();