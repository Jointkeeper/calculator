/**
 * ===== ANALYTICS.JS UNIT TESTS =====
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Analytics.js
 * –ó–∞–ø—É—Å–∫: –∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */

(function() {
    'use strict';
    
    console.log('üß™ Starting Analytics.js Unit Tests...');
    
    const tests = [];
    const results = {
        passed: 0,
        failed: 0,
        total: 0
    };
    
    // Helper function –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function test(description, testFunction) {
        tests.push({ description, testFunction });
    }
    
    // Helper function –¥–ª—è assertions
    function assert(condition, message) {
        if (!condition) {
            throw new Error(message);
        }
    }
    
    // ==================== TESTS ====================
    
    test('Analytics class –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω', () => {
        assert(typeof window.SteamphonyAnalytics === 'function', 
            'Analytics class not found in window.SteamphonyAnalytics');
    });
    
    test('Analytics instance –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è', () => {
        const analytics = new window.SteamphonyAnalytics({
            measurementId: 'G-TEST',
            debugMode: true
        });
        
        assert(analytics !== undefined, 'Analytics instance is undefined');
        assert(typeof analytics.trackEvent === 'function', 'trackEvent method missing');
        assert(typeof analytics.setCookieConsent === 'function', 'setCookieConsent method missing');
    });
    
    test('–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º', () => {
        const analytics = new window.SteamphonyAnalytics({
            measurementId: 'G-TEST',
            debugMode: true
        });
        
        assert(analytics.hasConsent === false, 'Initial consent should be false');
        assert(Array.isArray(analytics.eventQueue), 'Event queue should be array');
        assert(analytics.eventQueue.length === 0, 'Event queue should be empty initially');
    });
    
    test('–°–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å –±–µ–∑ consent', () => {
        const analytics = new window.SteamphonyAnalytics({
            measurementId: 'G-TEST',
            debugMode: true,
            consentRequired: true
        });
        
        const initialQueueLength = analytics.eventQueue.length;
        
        analytics.trackEvent('test_event', { test: true });
        
        assert(analytics.eventQueue.length === initialQueueLength + 1, 
            'Event was not added to queue');
    });
    
    test('setCookieConsent –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å consent', () => {
        const analytics = new window.SteamphonyAnalytics({
            measurementId: 'G-TEST',
            debugMode: true
        });
        
        analytics.setCookieConsent(true);
        assert(analytics.hasConsent === true, 'Consent not set to true');
        
        analytics.setCookieConsent(false);
        assert(analytics.hasConsent === false, 'Consent not set to false');
    });
    
    test('getAnalyticsStats –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', () => {
        const analytics = new window.SteamphonyAnalytics({
            measurementId: 'G-TEST',
            debugMode: true
        });
        
        const stats = analytics.getAnalyticsStats();
        
        assert(typeof stats === 'object', 'Stats should be object');
        assert(typeof stats.hasConsent === 'boolean', 'hasConsent should be boolean');
        assert(typeof stats.queuedEvents === 'number', 'queuedEvents should be number');
        assert(typeof stats.eventCounts === 'object', 'eventCounts should be object');
    });
    
    test('connectToProgressBar –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É', () => {
        const analytics = new window.SteamphonyAnalytics({
            measurementId: 'G-TEST',
            debugMode: true
        });
        
        const mockProgressBar = {
            addEventListener: (event, callback) => {
                // Mock implementation
            }
        };
        
        // –ù–µ –¥–æ–ª–∂–Ω–æ –ø–∞–¥–∞—Ç—å
        try {
            analytics.connectToProgressBar(mockProgressBar);
            assert(true, 'connectToProgressBar completed without error');
        } catch (error) {
            assert(false, 'connectToProgressBar threw error: ' + error.message);
        }
    });
    
    test('trackCalculatorStep –¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —à–∞–≥–∏', () => {
        const analytics = new window.SteamphonyAnalytics({
            measurementId: 'G-TEST',
            debugMode: true
        });
        
        const initialQueueLength = analytics.eventQueue.length;
        
        analytics.trackCalculatorStep(2, { direction: 'forward' });
        
        assert(analytics.eventQueue.length === initialQueueLength + 1, 
            'Calculator step event not tracked');
    });
    
    test('trackIndustrySelection –¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–±–æ—Ä –æ—Ç—Ä–∞—Å–ª–∏', () => {
        const analytics = new window.SteamphonyAnalytics({
            measurementId: 'G-TEST',
            debugMode: true
        });
        
        const initialQueueLength = analytics.eventQueue.length;
        
        analytics.trackIndustrySelection('restaurant', { 
            name: '–†–µ—Å—Ç–æ—Ä–∞–Ω', 
            category: '–û–±—â–µ–ø–∏—Ç' 
        });
        
        assert(analytics.eventQueue.length === initialQueueLength + 1, 
            'Industry selection event not tracked');
    });
    
    test('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
        const config = {
            measurementId: 'G-CUSTOM',
            debugMode: false,
            consentRequired: false,
            dataRetention: 30
        };
        
        const analytics = new window.SteamphonyAnalytics(config);
        
        assert(analytics.config.measurementId === 'G-CUSTOM', 
            'measurementId not set correctly');
        assert(analytics.config.debugMode === false, 
            'debugMode not set correctly');
        assert(analytics.config.consentRequired === false, 
            'consentRequired not set correctly');
    });
    
    test('destroy –¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã', () => {
        const analytics = new window.SteamphonyAnalytics({
            measurementId: 'G-TEST',
            debugMode: true
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è
        analytics.trackEvent('test_before_destroy', { test: true });
        
        // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º
        analytics.destroy();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–∏—Å—Ç–∫—É
        assert(analytics.eventQueue.length === 0, 'Event queue not cleared');
        assert(analytics.connectedComponents.size === 0, 'Connected components not cleared');
    });
    
    // ==================== TEST RUNNER ====================
    
    function runTests() {
        console.log('üöÄ Running Analytics.js Unit Tests...\n');
        
        tests.forEach((test, index) => {
            try {
                test.testFunction();
                console.log(`‚úÖ Test ${index + 1}: ${test.description}`);
                results.passed++;
            } catch (error) {
                console.error(`‚ùå Test ${index + 1}: ${test.description}`);
                console.error(`   Error: ${error.message}`);
                results.failed++;
            }
            results.total++;
        });
        
        console.log(`\nüìä ANALYTICS.JS UNIT TEST RESULTS:`);
        console.log(`   ‚úÖ Passed: ${results.passed}`);
        console.log(`   ‚ùå Failed: ${results.failed}`);
        console.log(`   üìä Total: ${results.total}`);
        console.log(`   üéØ Success Rate: ${Math.round((results.passed / results.total) * 100)}%`);
        
        if (results.failed === 0) {
            console.log('\nüéâ ALL ANALYTICS.JS TESTS PASSED!');
        } else {
            console.log('\n‚ö†Ô∏è  SOME TESTS FAILED - CHECK ERRORS ABOVE');
        }
        
        return results;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ Analytics –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof window.SteamphonyAnalytics !== 'undefined') {
        runTests();
    } else {
        console.log('‚ö†Ô∏è  Analytics class not found. Make sure the page is loaded.');
        console.log('   Run runAnalyticsTests() manually after page load.');
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è manual –∑–∞–ø—É—Å–∫–∞
    window.runAnalyticsTests = runTests;
    
})(); 