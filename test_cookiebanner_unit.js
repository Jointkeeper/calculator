/**
 * ===== COOKIEBANNER.JS UNIT TESTS =====
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CookieBanner.js
 * –ó–∞–ø—É—Å–∫: –∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */

(function() {
    'use strict';
    
    console.log('üß™ Starting CookieBanner.js Unit Tests...');
    
    const tests = [];
    const results = {
        passed: 0,
        failed: 0,
        total: 0
    };
    
    // Helper function –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function test(description, testFunction) {
        tests.push({ description, testFunction });
    }
    
    // Helper function –¥–ª—è assertions
    function assert(condition, message) {
        if (!condition) {
            throw new Error(message);
        }
    }
    
    // Cleanup helper
    function cleanupBanner() {
        const existingBanner = document.querySelector('.cookie-banner');
        if (existingBanner) {
            existingBanner.remove();
        }
    }
    
    // Mock Analytics –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    class MockAnalytics {
        constructor() {
            this.hasConsent = false;
            this.events = [];
        }
        
        setCookieConsent(consent) {
            this.hasConsent = consent;
        }
        
        trackEvent(eventName, params) {
            this.events.push({ eventName, params });
        }
    }
    
    // ==================== TESTS ====================
    
    test('CookieBanner class –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω', () => {
        assert(typeof window.SteamphonyCookieBanner === 'function', 
            'CookieBanner class not found in window.SteamphonyCookieBanner');
    });
    
    test('CookieBanner instance –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è', () => {
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        assert(cookieBanner !== undefined, 'CookieBanner instance is undefined');
        assert(typeof cookieBanner.showBanner === 'function', 'showBanner method missing');
        assert(typeof cookieBanner.hideBanner === 'function', 'hideBanner method missing');
        assert(typeof cookieBanner.getPreferences === 'function', 'getPreferences method missing');
    });
    
    test('Banner –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å DOM —ç–ª–µ–º–µ–Ω—Ç—ã', () => {
        cleanupBanner();
        
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        cookieBanner.showBanner();
        
        const bannerElement = document.querySelector('.cookie-banner');
        assert(bannerElement !== null, 'Banner DOM element not created');
        
        const acceptButton = bannerElement.querySelector('.cookie-banner__accept');
        const declineButton = bannerElement.querySelector('.cookie-banner__decline');
        
        assert(acceptButton !== null, 'Accept button not found');
        assert(declineButton !== null, 'Decline button not found');
        
        cleanupBanner();
    });
    
    test('Banner –¥–æ–ª–∂–µ–Ω —Å–∫—Ä—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ hideBanner', () => {
        cleanupBanner();
        
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        cookieBanner.showBanner();
        let bannerElement = document.querySelector('.cookie-banner');
        assert(bannerElement !== null, 'Banner should be visible');
        
        cookieBanner.hideBanner();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π timeout –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            bannerElement = document.querySelector('.cookie-banner');
            assert(bannerElement === null || bannerElement.style.display === 'none', 
                'Banner should be hidden');
        }, 100);
        
        cleanupBanner();
    });
    
    test('Accept button –¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å consent', () => {
        cleanupBanner();
        
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        cookieBanner.showBanner();
        
        const acceptButton = document.querySelector('.cookie-banner__accept');
        assert(acceptButton !== null, 'Accept button not found');
        
        // Simulate click
        acceptButton.click();
        
        assert(mockAnalytics.hasConsent === true, 'Consent not set after accept');
        
        cleanupBanner();
    });
    
    test('Decline button –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å consent', () => {
        cleanupBanner();
        
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        cookieBanner.showBanner();
        
        const declineButton = document.querySelector('.cookie-banner__decline');
        assert(declineButton !== null, 'Decline button not found');
        
        // Simulate click
        declineButton.click();
        
        assert(mockAnalytics.hasConsent === false, 'Consent incorrectly set after decline');
        
        cleanupBanner();
    });
    
    test('getPreferences –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', () => {
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        const preferences = cookieBanner.getPreferences();
        
        assert(typeof preferences === 'object', 'Preferences should be object');
        assert(typeof preferences.analytics === 'boolean', 'Analytics preference should be boolean');
        assert(typeof preferences.timestamp === 'number', 'Timestamp should be number');
    });
    
    test('localStorage –¥–æ–ª–∂–µ–Ω —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', () => {
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ cookies
        cookieBanner.acceptAllCookies();
        
        const storedPreferences = localStorage.getItem('steamphony_cookie_preferences');
        assert(storedPreferences !== null, 'Preferences not stored in localStorage');
        
        const parsed = JSON.parse(storedPreferences);
        assert(parsed.analytics === true, 'Analytics preference not saved correctly');
    });
    
    test('resetConsent –¥–æ–ª–∂–µ–Ω —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º
        cookieBanner.acceptAllCookies();
        assert(mockAnalytics.hasConsent === true, 'Consent should be true');
        
        // –ó–∞—Ç–µ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
        cookieBanner.resetConsent();
        
        const preferences = cookieBanner.getPreferences();
        assert(preferences.analytics === false, 'Analytics consent should be reset');
    });
    
    test('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
        const config = {
            position: 'top',
            theme: 'dark',
            language: 'en',
            autoShow: false
        };
        
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, config);
        
        assert(cookieBanner.config.position === 'top', 'Position not set correctly');
        assert(cookieBanner.config.theme === 'dark', 'Theme not set correctly');
        assert(cookieBanner.config.language === 'en', 'Language not set correctly');
        assert(cookieBanner.config.autoShow === false, 'AutoShow not set correctly');
    });
    
    test('Banner –¥–æ–ª–∂–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å keyboard navigation', () => {
        cleanupBanner();
        
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        cookieBanner.showBanner();
        
        const acceptButton = document.querySelector('.cookie-banner__accept');
        const declineButton = document.querySelector('.cookie-banner__decline');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º tabindex
        assert(acceptButton.tabIndex >= 0, 'Accept button not keyboard accessible');
        assert(declineButton.tabIndex >= 0, 'Decline button not keyboard accessible');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º focus
        acceptButton.focus();
        assert(document.activeElement === acceptButton, 'Accept button not focusable');
        
        cleanupBanner();
    });
    
    test('Banner –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å ARIA attributes', () => {
        cleanupBanner();
        
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        cookieBanner.showBanner();
        
        const bannerElement = document.querySelector('.cookie-banner');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º ARIA attributes
        assert(bannerElement.getAttribute('role') !== null, 'Banner missing role attribute');
        assert(bannerElement.getAttribute('aria-label') !== null, 'Banner missing aria-label');
        
        cleanupBanner();
    });
    
    test('destroy –¥–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã', () => {
        cleanupBanner();
        
        const mockAnalytics = new MockAnalytics();
        const cookieBanner = new window.SteamphonyCookieBanner(mockAnalytics, {
            autoShow: false
        });
        
        cookieBanner.showBanner();
        let bannerElement = document.querySelector('.cookie-banner');
        assert(bannerElement !== null, 'Banner should be visible before destroy');
        
        cookieBanner.destroy();
        
        bannerElement = document.querySelector('.cookie-banner');
        assert(bannerElement === null, 'Banner should be removed after destroy');
    });
    
    // ==================== TEST RUNNER ====================
    
    function runTests() {
        console.log('üöÄ Running CookieBanner.js Unit Tests...\n');
        
        tests.forEach((test, index) => {
            try {
                test.testFunction();
                console.log(`‚úÖ Test ${index + 1}: ${test.description}`);
                results.passed++;
            } catch (error) {
                console.error(`‚ùå Test ${index + 1}: ${test.description}`);
                console.error(`   Error: ${error.message}`);
                results.failed++;
            }
            results.total++;
        });
        
        // Cleanup –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        cleanupBanner();
        
        console.log(`\nüìä COOKIEBANNER.JS UNIT TEST RESULTS:`);
        console.log(`   ‚úÖ Passed: ${results.passed}`);
        console.log(`   ‚ùå Failed: ${results.failed}`);
        console.log(`   üìä Total: ${results.total}`);
        console.log(`   üéØ Success Rate: ${Math.round((results.passed / results.total) * 100)}%`);
        
        if (results.failed === 0) {
            console.log('\nüéâ ALL COOKIEBANNER.JS TESTS PASSED!');
        } else {
            console.log('\n‚ö†Ô∏è  SOME TESTS FAILED - CHECK ERRORS ABOVE');
        }
        
        return results;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ CookieBanner –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof window.SteamphonyCookieBanner !== 'undefined') {
        runTests();
    } else {
        console.log('‚ö†Ô∏è  CookieBanner class not found. Make sure the page is loaded.');
        console.log('   Run runCookieBannerTests() manually after page load.');
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è manual –∑–∞–ø—É—Å–∫–∞
    window.runCookieBannerTests = runTests;
    
})(); 