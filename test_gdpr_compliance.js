/**
 * ===== GDPR COMPLIANCE TESTS =====
 * 
 * –¢–µ—Å—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è GDPR Article 7 –∏ privacy-first –ø—Ä–∏–Ω—Ü–∏–ø–∞–º
 * –ó–∞–ø—É—Å–∫: –∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */

(function() {
    'use strict';
    
    console.log('üß™ Starting GDPR Compliance Tests...');
    
    const tests = [];
    const results = {
        passed: 0,
        failed: 0,
        total: 0
    };
    
    // Helper function –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function test(description, testFunction) {
        tests.push({ description, testFunction });
    }
    
    // Helper function –¥–ª—è assertions
    function assert(condition, message) {
        if (!condition) {
            throw new Error(message);
        }
    }
    
    // Helper –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function asyncTest(description, testFunction) {
        tests.push({ 
            description, 
            testFunction,
            async: true 
        });
    }
    
    // Helper –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    function resetConsentState() {
        localStorage.removeItem('steamphony_cookie_preferences');
        localStorage.removeItem('steamphony_analytics_consent');
        
        // –û—á–∏—â–∞–µ–º cookie banner
        const existingBanner = document.querySelector('.cookie-banner');
        if (existingBanner) {
            existingBanner.remove();
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º Analytics consent
        if (window.app && window.app.getAnalytics()) {
            window.app.getAnalytics().setCookieConsent(false);
        }
    }
    
    // ==================== GDPR COMPLIANCE TESTS ====================
    
    test('GDPR Article 7: Explicit consent required', () => {
        resetConsentState();
        
        const analytics = window.app.getAnalytics();
        
        // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ consent –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å false
        assert(analytics.hasConsent === false, 
            'Analytics should not have consent initially');
        
        // GA4 –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ consent
        assert(analytics.isGA4Loaded === false, 
            'GA4 should not be loaded without consent');
    });
    
    test('Privacy-first: –°–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ consent', () => {
        resetConsentState();
        
        const analytics = window.app.getAnalytics();
        const initialQueueLength = analytics.eventQueue.length;
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –±–µ–∑ consent
        analytics.trackEvent('privacy_test', { test: true });
        
        // –°–æ–±—ã—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        assert(analytics.eventQueue.length === initialQueueLength + 1, 
            'Event should be queued without consent');
        
        // GA4 –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
        assert(analytics.isGA4Loaded === false, 
            'GA4 should not be loaded for queued events');
    });
    
    test('Cookie Banner: –î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', () => {
        resetConsentState();
        
        const cookieBanner = window.app.getCookieBanner();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º banner
        cookieBanner.showBanner();
        
        const bannerElement = document.querySelector('.cookie-banner');
        assert(bannerElement !== null, 'Cookie banner should be visible for new users');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const acceptButton = bannerElement.querySelector('.cookie-banner__accept');
        const declineButton = bannerElement.querySelector('.cookie-banner__decline');
        
        assert(acceptButton !== null, 'Accept button must be present');
        assert(declineButton !== null, 'Decline button must be present');
        
        // Cleanup
        cookieBanner.hideBanner();
    });
    
    test('Consent granularity: –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏', () => {
        resetConsentState();
        
        const cookieBanner = window.app.getCookieBanner();
        cookieBanner.showBanner();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å"
        const customizeButton = document.querySelector('.cookie-banner__customize');
        if (customizeButton) {
            assert(customizeButton !== null, 'Customize button should be available');
        }
        
        // Cleanup
        cookieBanner.hideBanner();
    });
    
    test('Accept All: –ü–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å', () => {
        resetConsentState();
        
        const analytics = window.app.getAnalytics();
        const cookieBanner = window.app.getCookieBanner();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º banner –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ
        cookieBanner.showBanner();
        const acceptButton = document.querySelector('.cookie-banner__accept');
        
        if (acceptButton) {
            acceptButton.click();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ consent —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            assert(analytics.hasConsent === true, 
                'Analytics consent should be true after accept all');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const stored = localStorage.getItem('steamphony_cookie_preferences');
            assert(stored !== null, 'Preferences should be stored');
            
            const parsed = JSON.parse(stored);
            assert(parsed.analytics === true, 
                'Analytics preference should be true');
        }
    });
    
    test('Decline All: –û—Ç–∫–∞–∑ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å', () => {
        resetConsentState();
        
        const analytics = window.app.getAnalytics();
        const cookieBanner = window.app.getCookieBanner();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º banner –∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è
        cookieBanner.showBanner();
        const declineButton = document.querySelector('.cookie-banner__decline');
        
        if (declineButton) {
            declineButton.click();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ consent –æ—Å—Ç–∞–ª—Å—è false
            assert(analytics.hasConsent === false, 
                'Analytics consent should remain false after decline');
            
            // –°–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏
            analytics.trackEvent('test_after_decline', { test: true });
            assert(analytics.eventQueue.length > 0, 
                'Events should still be queued after decline');
        }
    });
    
    test('Consent withdrawal: –û—Ç–∑—ã–≤ —Å–æ–≥–ª–∞—Å–∏—è –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å', () => {
        resetConsentState();
        
        const analytics = window.app.getAnalytics();
        const cookieBanner = window.app.getCookieBanner();
        
        // –°–Ω–∞—á–∞–ª–∞ –¥–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        analytics.setCookieConsent(true);
        assert(analytics.hasConsent === true, 'Consent should be given');
        
        // –ó–∞—Ç–µ–º –æ—Ç–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        cookieBanner.resetConsent();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∑—ã–≤
        const preferences = cookieBanner.getPreferences();
        assert(preferences.analytics === false, 
            'Analytics consent should be withdrawn');
    });
    
    test('Do Not Track: DNT header –¥–æ–ª–∂–µ–Ω —É–≤–∞–∂–∞—Ç—å—Å—è', () => {
        resetConsentState();
        
        // Simulate DNT header
        const originalDNT = navigator.doNotTrack;
        Object.defineProperty(navigator, 'doNotTrack', {
            value: '1',
            writable: true
        });
        
        const analytics = window.app.getAnalytics();
        
        // –ï—Å–ª–∏ DNT –∞–∫—Ç–∏–≤–µ–Ω, tracking –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (window.STEAMPHONY_CONFIG.cookieBanner.respectDNT) {
            assert(analytics.hasConsent === false, 
                'Analytics should respect DNT header');
        }
        
        // Restore original DNT
        Object.defineProperty(navigator, 'doNotTrack', {
            value: originalDNT,
            writable: true
        });
    });
    
    test('Data minimization: –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ', () => {
        resetConsentState();
        
        const analytics = window.app.getAnalytics();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ IP anonymization –≤–∫–ª—é—á–µ–Ω
        assert(analytics.config.anonymizeIP === true, 
            'IP anonymization should be enabled');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        assert(typeof analytics.config.dataRetention === 'number', 
            'Data retention period should be set');
        assert(analytics.config.dataRetention <= 30, 
            'Data retention should be limited (max 30 days)');
    });
    
    test('Consent audit trail: –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏–π', () => {
        resetConsentState();
        
        const cookieBanner = window.app.getCookieBanner();
        
        // –î–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        cookieBanner.acceptAllCookies();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ timestamp —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        const preferences = cookieBanner.getPreferences();
        assert(typeof preferences.timestamp === 'number', 
            'Consent timestamp should be recorded');
        assert(preferences.timestamp > 0, 
            'Timestamp should be valid');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä—Å–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
        assert(typeof preferences.version === 'string', 
            'Privacy policy version should be recorded');
    });
    
    asyncTest('Banner auto-hide: –ü–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–∏—è banner –¥–æ–ª–∂–µ–Ω –∏—Å—á–µ–∑–∞—Ç—å', async () => {
        resetConsentState();
        
        const cookieBanner = window.app.getCookieBanner();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º banner
        cookieBanner.showBanner();
        let bannerElement = document.querySelector('.cookie-banner');
        assert(bannerElement !== null, 'Banner should be visible');
        
        // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        const acceptButton = bannerElement.querySelector('.cookie-banner__accept');
        if (acceptButton) {
            acceptButton.click();
            
            // –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ banner –∏—Å—á–µ–∑
            bannerElement = document.querySelector('.cookie-banner');
            assert(bannerElement === null || bannerElement.style.display === 'none', 
                'Banner should be hidden after consent');
        }
    });
    
    test('Returning users: –°–æ–≥–ª–∞—Å–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å—Å—è', () => {
        resetConsentState();
        
        const cookieBanner = window.app.getCookieBanner();
        
        // –î–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ
        cookieBanner.acceptAllCookies();
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –≤–∏–∑–∏—Ç
        const newCookieBanner = new window.SteamphonyCookieBanner(
            window.app.getAnalytics(), 
            window.STEAMPHONY_CONFIG.cookieBanner
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        const preferences = newCookieBanner.getPreferences();
        assert(preferences.analytics === true, 
            'Consent should be remembered for returning users');
    });
    
    test('Legal basis: –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', () => {
        resetConsentState();
        
        const cookieBanner = window.app.getCookieBanner();
        cookieBanner.showBanner();
        
        const bannerElement = document.querySelector('.cookie-banner');
        if (bannerElement) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–∏—Ç–∏–∫—É
            const privacyLink = bannerElement.querySelector('a[href*="privacy"]');
            assert(privacyLink !== null, 
                'Privacy policy link should be present');
        }
        
        // Cleanup
        cookieBanner.hideBanner();
    });
    
    test('Accessibility: WCAG 2.1 AA compliance', () => {
        resetConsentState();
        
        const cookieBanner = window.app.getCookieBanner();
        cookieBanner.showBanner();
        
        const bannerElement = document.querySelector('.cookie-banner');
        if (bannerElement) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º ARIA attributes
            assert(bannerElement.getAttribute('role') !== null, 
                'Banner should have role attribute');
            assert(bannerElement.getAttribute('aria-label') !== null, 
                'Banner should have aria-label');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º keyboard navigation
            const focusableElements = bannerElement.querySelectorAll('button, a, [tabindex]');
            assert(focusableElements.length > 0, 
                'Banner should have focusable elements');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç (basic check)
            const computedStyle = window.getComputedStyle(bannerElement);
            assert(computedStyle.backgroundColor !== 'transparent', 
                'Banner should have background color for contrast');
        }
        
        // Cleanup
        cookieBanner.hideBanner();
    });
    
    test('Cross-site tracking prevention: –°—Ç—Ä–æ–≥–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ cookies', () => {
        resetConsentState();
        
        const analytics = window.app.getAnalytics();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ third-party cookies –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è
        assert(analytics.hasConsent === false, 
            'Third-party tracking should be disabled initially');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ first-party cookies
        const config = analytics.config;
        assert(config.measurementId.startsWith('G-'), 
            'Should use Google Analytics 4 (first-party)');
    });
    
    // ==================== TEST RUNNER ====================
    
    async function runTests() {
        console.log('üöÄ Running GDPR Compliance Tests...\n');
        
        for (let i = 0; i < tests.length; i++) {
            const test = tests[i];
            try {
                if (test.async) {
                    await test.testFunction();
                } else {
                    test.testFunction();
                }
                console.log(`‚úÖ Test ${i + 1}: ${test.description}`);
                results.passed++;
            } catch (error) {
                console.error(`‚ùå Test ${i + 1}: ${test.description}`);
                console.error(`   Error: ${error.message}`);
                results.failed++;
            }
            results.total++;
        }
        
        // Final cleanup
        resetConsentState();
        
        console.log(`\nüìä GDPR COMPLIANCE TEST RESULTS:`);
        console.log(`   ‚úÖ Passed: ${results.passed}`);
        console.log(`   ‚ùå Failed: ${results.failed}`);
        console.log(`   üìä Total: ${results.total}`);
        console.log(`   üéØ Success Rate: ${Math.round((results.passed / results.total) * 100)}%`);
        
        if (results.failed === 0) {
            console.log('\nüéâ ALL GDPR COMPLIANCE TESTS PASSED!');
            console.log('üîí Your implementation is GDPR Article 7 compliant!');
        } else {
            console.log('\n‚ö†Ô∏è  SOME GDPR TESTS FAILED - REVIEW PRIVACY IMPLEMENTATION');
        }
        
        return results;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ App –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof window.app !== 'undefined') {
        runTests();
    } else {
        console.log('‚ö†Ô∏è  App not found. Make sure the page is loaded.');
        console.log('   Run runGDPRTests() manually after page load.');
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è manual –∑–∞–ø—É—Å–∫–∞
    window.runGDPRTests = runTests;
    
})(); 