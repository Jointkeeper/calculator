/**
 * ===== INTEGRATION TESTS =====
 * 
 * –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Analytics.js + CookieBanner.js + main.js
 * –ó–∞–ø—É—Å–∫: –∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –≤ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∫–æ–Ω—Å–æ–ª—å –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */

(function() {
    'use strict';
    
    console.log('üß™ Starting Integration Tests...');
    
    const tests = [];
    const results = {
        passed: 0,
        failed: 0,
        total: 0
    };
    
    // Helper function –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function test(description, testFunction) {
        tests.push({ description, testFunction });
    }
    
    // Helper function –¥–ª—è assertions
    function assert(condition, message) {
        if (!condition) {
            throw new Error(message);
        }
    }
    
    // Helper –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    function asyncTest(description, testFunction) {
        tests.push({ 
            description, 
            testFunction,
            async: true 
        });
    }
    
    // ==================== INTEGRATION TESTS ====================
    
    test('App instance –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å', () => {
        assert(typeof window.app === 'object', 'App instance not found in window.app');
        assert(window.app !== null, 'App instance is null');
    });
    
    test('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã', () => {
        assert(typeof window.app.progressBar === 'object', 
            'ProgressBar component not available');
        assert(typeof window.app.industrySelector === 'object', 
            'IndustrySelector component not available');
        assert(typeof window.app.calculator === 'object', 
            'Calculator component not available');
    });
    
    test('–ù–æ–≤—ã–µ analytics –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã', () => {
        assert(typeof window.app.getAnalytics === 'function', 
            'getAnalytics method not found');
        assert(typeof window.app.getCookieBanner === 'function', 
            'getCookieBanner method not found');
        assert(typeof window.app.setCookieConsent === 'function', 
            'setCookieConsent method not found');
        assert(typeof window.app.resetCookieConsent === 'function', 
            'resetCookieConsent method not found');
    });
    
    test('Analytics –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', () => {
        const analytics = window.app.getAnalytics();
        assert(analytics !== null, 'Analytics not initialized');
        assert(typeof analytics.trackEvent === 'function', 
            'Analytics trackEvent method missing');
        assert(typeof analytics.setCookieConsent === 'function', 
            'Analytics setCookieConsent method missing');
    });
    
    test('CookieBanner –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', () => {
        const cookieBanner = window.app.getCookieBanner();
        assert(cookieBanner !== null, 'CookieBanner not initialized');
        assert(typeof cookieBanner.showBanner === 'function', 
            'CookieBanner showBanner method missing');
        assert(typeof cookieBanner.getPreferences === 'function', 
            'CookieBanner getPreferences method missing');
    });
    
    test('getAppState –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å analytics –¥–∞–Ω–Ω—ã–µ', () => {
        const appState = window.app.getAppState();
        
        assert(typeof appState === 'object', 'App state should be object');
        assert(typeof appState.components === 'object', 'Components state missing');
        assert(typeof appState.components.analytics === 'boolean', 
            'Analytics component state missing');
        assert(typeof appState.components.cookieBanner === 'boolean', 
            'CookieBanner component state missing');
        assert(typeof appState.analytics === 'object', 
            'Analytics state missing');
        assert(typeof appState.cookieBanner === 'object', 
            'CookieBanner state missing');
    });
    
    test('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å', () => {
        const originalStep = window.app.currentStep;
        
        // Test nextStep
        window.app.nextStep();
        assert(window.app.currentStep === originalStep + 1, 
            'nextStep not working after integration');
        
        // Test previousStep
        window.app.previousStep();
        assert(window.app.currentStep === originalStep, 
            'previousStep not working after integration');
    });
    
    test('Analytics –¥–æ–ª–∂–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é', () => {
        const analytics = window.app.getAnalytics();
        const initialQueueLength = analytics.eventQueue.length;
        
        // Trigger navigation
        window.app.nextStep();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å
        assert(analytics.eventQueue.length > initialQueueLength, 
            'Navigation events not tracked');
        
        // Return to original state
        window.app.previousStep();
    });
    
    test('STEAMPHONY_CONFIG –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω', () => {
        assert(typeof window.STEAMPHONY_CONFIG === 'object', 
            'STEAMPHONY_CONFIG not found');
        assert(typeof window.STEAMPHONY_CONFIG.analytics === 'object', 
            'Analytics config missing');
        assert(typeof window.STEAMPHONY_CONFIG.cookieBanner === 'object', 
            'CookieBanner config missing');
    });
    
    test('Global classes –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã', () => {
        assert(typeof window.SteamphonyAnalytics === 'function', 
            'SteamphonyAnalytics class not global');
        assert(typeof window.SteamphonyCookieBanner === 'function', 
            'SteamphonyCookieBanner class not global');
    });
    
    test('Analytics –∏ CookieBanner –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã', () => {
        const analytics = window.app.getAnalytics();
        const cookieBanner = window.app.getCookieBanner();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ CookieBanner –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å Analytics
        const initialConsent = analytics.hasConsent;
        
        // –ß–µ—Ä–µ–∑ CookieBanner
        cookieBanner.acceptAllCookies();
        assert(analytics.hasConsent === true, 
            'CookieBanner not controlling Analytics consent');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        analytics.setCookieConsent(initialConsent);
    });
    
    test('Error handling –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å gracefully', () => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        const originalTrackEvent = window.app.getAnalytics().trackEvent;
        
        // –õ–æ–º–∞–µ–º –º–µ—Ç–æ–¥
        window.app.getAnalytics().trackEvent = function() {
            throw new Error('Intentional test error');
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–∞–¥–∞–µ—Ç
        try {
            window.app.nextStep();
            window.app.previousStep();
            assert(true, 'App continues working despite analytics error');
        } catch (error) {
            assert(false, 'App crashed due to analytics error: ' + error.message);
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–æ–¥
        window.app.getAnalytics().trackEvent = originalTrackEvent;
    });
    
    test('LocalStorage integration –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å', () => {
        const cookieBanner = window.app.getCookieBanner();
        
        // –û—á–∏—â–∞–µ–º localStorage
        localStorage.removeItem('steamphony_cookie_preferences');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º preference
        cookieBanner.acceptAllCookies();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        const stored = localStorage.getItem('steamphony_cookie_preferences');
        assert(stored !== null, 'Preferences not saved to localStorage');
        
        const parsed = JSON.parse(stored);
        assert(parsed.analytics === true, 'Analytics preference not saved correctly');
    });
    
    test('Responsive design classes –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω—ã', () => {
        const cookieBanner = window.app.getCookieBanner();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º banner
        cookieBanner.showBanner();
        
        const bannerElement = document.querySelector('.cookie-banner');
        if (bannerElement) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º responsive classes
            const computedStyle = window.getComputedStyle(bannerElement);
            assert(computedStyle.position === 'fixed', 
                'Banner should be fixed positioned');
            
            // Cleanup
            cookieBanner.hideBanner();
        }
    });
    
    test('Event listeners –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã', () => {
        const analytics = window.app.getAnalytics();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ components –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        assert(analytics.connectedComponents.has('progressBar'), 
            'ProgressBar not connected to analytics');
        assert(analytics.connectedComponents.has('industrySelector'), 
            'IndustrySelector not connected to analytics');
        assert(analytics.connectedComponents.has('calculator'), 
            'Calculator not connected to analytics');
    });
    
    asyncTest('Cookie consent flow –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å end-to-end', async () => {
        const analytics = window.app.getAnalytics();
        const cookieBanner = window.app.getCookieBanner();
        
        // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        analytics.setCookieConsent(false);
        localStorage.removeItem('steamphony_cookie_preferences');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º banner
        cookieBanner.showBanner();
        
        // Simulate user accepting
        const acceptButton = document.querySelector('.cookie-banner__accept');
        if (acceptButton) {
            acceptButton.click();
            
            // –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            assert(analytics.hasConsent === true, 
                'Consent not set after accept button click');
            
            const bannerElement = document.querySelector('.cookie-banner');
            assert(bannerElement === null || bannerElement.style.display === 'none', 
                'Banner not hidden after accept');
        }
    });
    
    // ==================== TEST RUNNER ====================
    
    async function runTests() {
        console.log('üöÄ Running Integration Tests...\n');
        
        for (let i = 0; i < tests.length; i++) {
            const test = tests[i];
            try {
                if (test.async) {
                    await test.testFunction();
                } else {
                    test.testFunction();
                }
                console.log(`‚úÖ Test ${i + 1}: ${test.description}`);
                results.passed++;
            } catch (error) {
                console.error(`‚ùå Test ${i + 1}: ${test.description}`);
                console.error(`   Error: ${error.message}`);
                results.failed++;
            }
            results.total++;
        }
        
        console.log(`\nüìä INTEGRATION TEST RESULTS:`);
        console.log(`   ‚úÖ Passed: ${results.passed}`);
        console.log(`   ‚ùå Failed: ${results.failed}`);
        console.log(`   üìä Total: ${results.total}`);
        console.log(`   üéØ Success Rate: ${Math.round((results.passed / results.total) * 100)}%`);
        
        if (results.failed === 0) {
            console.log('\nüéâ ALL INTEGRATION TESTS PASSED!');
        } else {
            console.log('\n‚ö†Ô∏è  SOME TESTS FAILED - CHECK ERRORS ABOVE');
        }
        
        return results;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ App –¥–æ—Å—Ç—É–ø–µ–Ω
    if (typeof window.app !== 'undefined') {
        runTests();
    } else {
        console.log('‚ö†Ô∏è  App not found. Make sure the page is loaded.');
        console.log('   Run runIntegrationTests() manually after page load.');
    }
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è manual –∑–∞–ø—É—Å–∫–∞
    window.runIntegrationTests = runTests;
    
})(); 